#! /usr/bin/env bash
set -e

prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

composeFile=$1

yq() {
  docker run --rm -i -v $(realpath $(dirname $composeFile)):/workdir mikefarah/yq yq $@
}

function usage() {
  echo "$0 <docker-compose.yml> [-d|-i|-a|-b]" 1>&2
}

if [[ -z "$1" ]]; then
  usage
  exit 1
fi

function findLocalDependencies() {
  deps=
  while IFS= read -r line;do
    relativeDep=$(echo $line | cut -d ' ' -f2 | cut -d : -f1)
    if [[ $relativeDep =~ \.\.?\/.* ]];  then
      mountSource=$(realpath $(dirname $composeFile)/$relativeDep)
      mountDest=$(echo $line | cut -d ' ' -f2 | cut -d : -f2)
      deps="${mountSource}:${mountDest}
$deps"
  fi
  done < <(yq r $(basename $composeFile) 'services.*.volumes')
  echo -n "$deps" | sort | uniq
}

function findLocalImages() {
  while IFS= read -r line;do
    if [[ -e $DIR/../docker/$line ]]; then
      echo $line
    fi
  done < <(yq r $(basename $composeFile) '**.image' | sort | uniq)
}

function findAnchorPaths() {
  yq r -p p $(basename $composeFile) 'x-*'
}

function findDbPaths() {
  yq r -p p $(basename $composeFile) 'services.*' | grep -e '.*_db$'
}

case $2 in
  -d) findLocalDependencies;;
  -i) findLocalImages;;
  -a) findAnchorPaths;;
  -b) findDbPaths;;
  *) usage && exit 1
esac
