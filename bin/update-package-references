#! /usr/bin/env bash
#- Script that updates package.json and Gemfile etna references to a special sha that contains
#- etna-js or etna packages respectively.  It also updates versions in lock files to ensure that
#- the current code in this commit is always deployable as a dependency.

set -e

prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

function usage() {
  echo "$0 [-f]" 1>&2
	cat $SOURCE | grep -E '^#-.*$$' | sed -e 's@^#- @  @' 1>&2
}

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
  usage
  exit 0
fi

cd $DIR/..

git log --pretty=oneline --abbrev-commit | head -n 50
git log --pretty=oneline --abbrev-commit | grep "etna reference updates" || true

lastCommitted=$(git log --pretty=oneline --abbrev-commit --no-merges | grep "etna reference updates" | head -n 1 | cut -d' ' -f1)
echo "Last etna reference update $lastCommitted"
lastCommitted=${lastCommitted:-HEAD~100}
echo "Checking for changes since $lastCommitted"

#- -f
#-   Used to force updates even if no changes to etna are detected in the current commit log.
if  ! (git diff --name-only $lastCommitted | grep etna/) && [[ $1 != "-f" ]]; then
  echo 'No changes to etna found, skipping'
  exit 0
fi

shopt -s globstar

SHA=$(git rev-parse --verify HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)

function mkArtifactSha() {
    local orig=$(pwd)
    local artifactName=$1
    local targetDir=$2

    cd $(mktemp -d)
    refSpec=refs/artifacts/$artifactName/$SHA

    (
    cp -r $DIR/../.git ./
    git checkout --orphan "$artifactName-$SHA"
    cp -r $orig/$targetDir/* ./
    rm -rf packages || true
    git add .
    git commit -m "Artifact $artifactName for sha $SHA"
    sha=$(git rev-parse --verify HEAD)
    git update-ref "$refSpec" $sha
    git push origin "$refSpec" --force
    ) 1>/dev/null

    git rev-parse --verify "$refSpec"
    cd $orig
}

function updateNpmReferences() {
  local package_name=$1
  local sha=$2
  local new_dep="git\+https:\/\/git@github\.com\/mountetna\/monoetna\.git\#$sha"

  for package_json in $DIR/../**/package.json; do
    if [[ "$package_json" =~ ./node_modules/ ]]; then continue; fi
    echo "Processing $package_json"
    cd "$(dirname "$package_json")"
    if grep "\"$package_name\":" package.json &>/dev/null; then
      echo "Applying update to $package_json"
      sed -i -e "s/\"$package_name\":\ \".*\"/\"$package_name\":\ \"$new_dep\"/" package.json
      cd $DIR/..
      docker-compose run -e SKIP_RUBY_SETUP=1 --rm "$(basename "$(dirname "$package_json")")_app" npm update $package_name
    fi
  done
}

function updateBundleReferences() {
  local package_name=$1
  local artifactName=$2
  local git="https:\/\/github\.com\/mountetna\/monoetna\.git"

  for gemfile in $DIR/../**/Gemfile; do
    if ! [[ -e "$(dirname $gemfile)/docker-compose.yml" ]]; then continue; fi
    echo "Processing $gemfile"
    cd "$(dirname "$gemfile")"
    if grep "gem[ \t]\+[\"']etna[\"']" "$gemfile" &>/dev/null; then
      echo "Applying update to $gemfile"
      sed -i -e "s@gem[ \t]\+[\"']etna[\"'].*@gem '${package_name}', git: '${git}', branch: 'refs/artifacts/$artifactName/$SHA'@" "$gemfile"
      cd $DIR/..
      docker-compose run -e SKIP_RUBY_SETUP=1 --rm "$(basename "$(dirname "$gemfile")")_app" bundle update $package_name
    fi
  done
}

export COMPOSE_PROJECT_NAME=monoetna

# First, handle etna-js
cd $DIR/..
package_name='etna-js'
dir='etna/packages/etna-js'
echo "Updating $package_name from $dir"
sha=$(mkArtifactSha npm-$package_name $dir)
echo "Got new ref sha $sha"
updateNpmReferences "$package_name" "$sha"

# Next, handle etna
cd $DIR/..
package_name='etna'
dir='etna'
echo "Updating $package_name from $dir"
sha=$(mkArtifactSha gem-${package_name} $dir)
echo "Updating $package_name from $dir"
updateBundleReferences "$package_name" "gem-${package_name}"


cd $DIR/..
if ! [ -z "$IS_CI" ]; then
    git status
    git add .
    git commit -m "etna reference updates"
    echo "::set-output name=updated::true"
fi

