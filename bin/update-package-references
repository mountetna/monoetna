#! /usr/bin/env bash
set -e

prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

cd $DIR/..

shopt -s globstar

SHA=$(git rev-parse --verify HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)

function mkArtifactSha() {
    local orig=$(pwd)
    local artifactName=$1
    local targetDir=$2

    cd $(mktemp -d)
    refSpec=refs/artifacts/$artifactName/$SHA

    (
    cp -r $DIR/../.git ./
    git checkout --orphan "$artifactName-$SHA"
    cp -r $orig/$targetDir/* ./
    git add .
    git commit -m "Artifact $artifactName for sha $SHA"
    sha=$(git rev-parse --verify HEAD)
    git update-ref "$refSpec" $sha
    git push origin "$refSpec" --force
    ) &>/dev/null

    git rev-parse --verify "$refSpec"
    cd $orig
}


IFS=$'\n'
for dep in $($DIR/child-npm-projects); do
    IFS=' '
    read -r package_name dir < <(echo "$dep")
    echo "Updating $package_name from $dir"
    sha=$(mkArtifactSha npm-$package_name $dir)
    echo "Got new ref sha $sha"
    new_dep="git\+https:\/\/git@github\.com\/mountetna\/monoetna\.git\#$sha"

    for package_json in $DIR/../**/package.json; do
        echo "Processing $package_json"
        cd $(dirname $package_json)
        if grep "\"$package_name\":" package.json &>/dev/null; then
          echo "Applying update to $package_json"
          sed -i -e "s/\"$package_name\":\ \".*\"/\"$package_name\":\ \"$new_dep\"/" package.json
          npm update $package_name
        fi
    done
done



# on my branch, give me the latest package-lock.json based on my branch.


