#!/usr/bin/env ruby
#
require 'optparse'
require 'resolv'
require 'json'
require 'date'
require 'fileutils'
require 'digest'
require 'net/http'
require 'cgi'
require 'securerandom'
require 'readline'
require 'base64'
require 'pathname'
require 'shellwords'
require 'singleton'

CONFIG_FILE='~/.metis.json'

def test_env?
  ENV['METIS_ENV'] == 'test'
end

def config_exists?
  ::File.exist?(::File.expand_path(CONFIG_FILE))
end


def progress(completion, rate, path)
  bar_size = 20

  progress = "+"*(bar_size * completion) + " "*(bar_size-completion)

  if rate > 1024*1024*1024
    rate = "#{(rate / 1024/1024/1024).round(2)}G"
  elsif rate > 1024*1024
    rate = "#{(rate / 1024/1024).round(2)}M"
  elsif rate > 1024
    rate = "#{(rate / 1024).round(2)}k"
  end

  "\r#{progress} #{path} - #{rate}B/s"
end

def metis_path(path)
  /^metis:\/\/(?<project>[^\/]+)\/(?<bucket>[^\/]+)\/(?<file_path>.+)$/.match(path)
end

class MetisConfig
  include Singleton

  def self.[](k)
    instance[k]
  end

  def config(config)
    @config = config
  end

  def [](k)
    @config[k]
  end
end

INITIAL_BLOB_SIZE = 2**10
MAX_BLOB_SIZE = 2**22;
ZERO_HASH = 'd41d8cd98f00b204e9800998ecf8427e'

class Upload
  attr_reader :file_path
  def initialize(file_path)
    @file_path = file_path

    @next_blob_size = [ file_size, INITIAL_BLOB_SIZE ].min
    @current_byte_position = 0
  end

  attr_accessor :next_blob_size

  def current_byte_position=(position)
    @current_byte_position = position
    @current_bytes = nil
    @current_byte_position
  end

  def current_byte_position
    @current_byte_position
  end

  def next_blob!
    self.current_byte_position = @current_byte_position + @next_blob_size

    @next_blob_size = [
        MAX_BLOB_SIZE,
        # in fact we should stop when we hit the end of the file
        file_size - current_byte_position
    ].min
  end

  def complete?
    @current_byte_position >= file_size
  end

  def next_blob_hash
    Digest::MD5.hexdigest(current_bytes)
  end

  def current_bytes
    @current_bytes ||= IO.binread(@file_path, @next_blob_size, @current_byte_position)
  end

  def file_size
    @file_size ||= ::File.size(@file_path)
  end
end

class MetisClient
  class Error < StandardError
  end

  class UploadError < StandardError
  end

  def initialize(host, token)
    @host = host
    @token = token
  end

  def authorize_upload(project_name, bucket_name, file_path)
    response = json_post('/authorize/upload', project_name: project_name, bucket_name: bucket_name, file_path: file_path)

    raise MetisClient::Error, "Could not upload file to #{file_path}\n#{error(response)}" unless response.code == "200"

    return json_body(response)
  end

  def start_upload(upload_path, upload)
    response = json_post(upload_path,
      file_size: upload.file_size,
      action: 'start',
      next_blob_size: upload.next_blob_size,
      next_blob_hash: upload.next_blob_hash
    )

    raise MetisClient::UploadError, "Problem starting the upload on Metis: #{error(response)}" if response.code == '422'
    raise MetisClient::Error, "Could not upload file #{upload.file_path}\n#{error(response)}" unless response.code == "200"

    json_body(response)
  end

  def reset_upload(upload_path, upload)
    response = json_post(upload_path,
      file_size: upload.file_size,
      action: 'start',
      next_blob_size: upload.next_blob_size,
      next_blob_hash: upload.next_blob_hash,
      reset: true
    )

    raise MetisClient::UploadError, "Problem resetting the upload on Metis: #{error(response)}" if response.code == '422'
    raise MetisClient::Error, "Could not reset file #{upload.file_path}\n#{error(response)}" unless response.code == "200"

    json_body(response)
  end

  def retry_blob(upload_path, upload, blob, retries)
    retries += 1

    print "\rWaiting for server restart"+"."*retries+"\x1b[0K"

    sleep 15

    if retries < 60
      blob_upload(upload_path, upload, blob, retries)
      return
    end

    raise MetisClient::Error, "Could not contact server, giving up"
  end

  def blob_upload(upload_path, upload, blob, retries=0)
    begin
      response = multipart_post(
        upload_path, [
          [ 'action', 'blob', ],
          [ 'blob_data', blob[:blob_data], {filename: 'blob'} ],
          [ 'next_blob_size', blob[:next_blob_size].to_s ],
          [ 'next_blob_hash', blob[:next_blob_hash].to_s ],
          [ 'current_byte_position', blob[:current_byte_position].to_s ]
        ]
      )
    rescue OpenSSL::SSL::SSLError => e
      if e.message =~ /write client hello/
        return retry_blob(upload_path, upload, blob, retries)
      end
      raise e
    rescue Errno::ECONNREFUSED => e
      return retry_blob(upload_path, upload, blob, retries)
    end

    if response.code == '503' || response.code == '502'
      retry_blob(upload_path, upload, blob, retries)
      return
    end

    raise MetisClient::UploadError, "Problem with uploading the blob: #{error(response)}" if response.code == '422'
    raise MetisClient::Error, "Could not upload file #{upload.file_path}\n#{error(response)}" unless response.code == "200"
  end

  def create_folder(project_name, folder_path)
    response = json_post("/#{project_name}/folder/create/#{URI.encode(folder_path)}")
    raise MetisClient::Error, "Could not create folder #{folder_path}\n#{error(response)}" unless response.code == "200" || (response.code == "422" && error(response) == 'Folder exists')
  end

  def list_buckets(project_name)
    response = https.request( get("/#{project_name}/list") )
    raise MetisClient::Error, "Could not list buckets for #{project_name}\n#{error(response)} #{response.code}" unless response.code == "200"
    return json_body(response)[:buckets]
  end

  def list_folder(project_name,folder_path)
    response = https.request( get("/#{project_name}/list/#{URI.encode(folder_path || '')}") )

    return nil if response.code == "404"
    raise MetisClient::Error, "Could not list folder #{folder_path}\n#{error(response)}" unless response.code == "200"
    return json_body(response)
  end

  def rename_folder(project_name,bucket_name,folder_path,new_folder_path)
    response = json_post("/#{project_name}/folder/rename/#{bucket_name}/#{URI.encode(folder_path)}", new_folder_path: new_folder_path)
    raise MetisClient::Error, "Could not rename folder #{folder_path}\n#{error(response)}" unless response.code == "200"
  end

  def rename_file(project_name,bucket_name,file_path,new_file_path)
    response = json_post("/#{project_name}/file/rename/#{bucket_name}/#{URI.encode(file_path)}", new_file_path: new_file_path)
    raise MetisClient::Error, "Could not rename file #{file_path}\n#{error(response)}" unless response.code == "200"
  end

  def get_file(path, &block)
    https.request(get(path)) do |response|
      response.read_body do |chunk|
        yield chunk
      end
    end
  end

  def remove_folder(project_name, folder_path)
    response = delete_request("/#{project_name}/folder/remove/#{URI.encode(folder_path)}")
    raise MetisClient::Error, "Could not remove folder #{folder_path}\n#{error(response)}" unless response.code == "200"
  end

  def remove_file(project_name, file_path)
    response = delete_request("/#{project_name}/file/remove/#{URI.encode(file_path)}")
    raise MetisClient::Error, "Could not remove file #{file_path}\n#{error(response)}" unless response.code == "200"
  end

  def copy_file(project_name, file_path, proposed_file_path)
    if proposed_file_path.start_with?('metis://')
      new_bucket_name = nil # not used
      new_file_path = proposed_file_path
    else
      split_parts = proposed_file_path.split('/')
      new_bucket_name = split_parts.first
      new_file_path = split_parts.slice(1, split_parts.length - 1).join('/')
    end

    if file_path.start_with?('metis://')
      match = metis_path(file_path)
      old_file_path = "#{match[:bucket]}/#{match[:file_path]}"
    else
      old_file_path = file_path
    end

    response = json_post("/#{project_name}/file/copy/#{URI.encode(old_file_path)}",
      new_file_path: new_file_path,
      new_bucket_name: new_bucket_name)

    raise MetisClient::Error, "Could not copy file #{file_path} to #{proposed_file_path}\n#{error(response)}" unless response.code == "200"
  end

  private

  def json_post(path, body={})
    req = post(path)
    req['Content-Type'] = 'application/json'
    req.body = body.to_json
    https.request(req)
  end

  def delete_request(path)
    req = delete(path)
    https.request(req)
  end

  def multipart_post(path, body)
    req = post(path)
    req.set_form(body, 'multipart/form-data')
    https.request(req)
  end

  def get(path)
    request(path, Net::HTTP::Get)
  end

  def post(path)
    request(path, Net::HTTP::Post)
  end

  def delete(path)
    request(path, Net::HTTP::Delete)
  end

  def https
    @https ||= begin
      https = Net::HTTP.new(@host,443)
      https.use_ssl = true
      https
    end
  end

  def request(path, method)
    uri = URI.parse("https://#{@host}#{path}")
    req = method.new(uri.request_uri)
    req['Authorization'] = "Etna #{@token}"
    cookie = CGI::Cookie.new(MetisConfig[:metis_uid_name], MetisConfig[:metis_uid])
    req['Cookie'] = cookie.to_s
    return req
  end

  def json_body(response)
    JSON.parse(response.body,symbolize_names: true)
  end

  def error(response)
    response['Content-Type'] == 'application/json' ? json_body(response)[:error] : response.body
  end
end

class MetisShell
  USAGE=<<EOT
Recursively upload files to a Metis folder
Usage: metis_client [metis://<path>]
EOT

  class Command
    def self.inherited(subclass)
      @command_list ||= []
      @command_list << subclass
    end

    def self.list
      @command_list
    end

    def self.command_name
      name.split(/::/).last
        .gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2')
        .gsub(/([a-z\d])([A-Z])/, '\1_\2')
        .downcase
    end

    attr_reader :options

    def initialize(shell)
      @shell = shell
      @options = {}
    end

    def run(*args)
      raise "#{self.class.command_name} is not implemented!"
    end

    def done?
      @done
    end

    def self.usage(msg=nil)
      @usage = msg if msg
      @usage
    end

    def parse(options)
      parse_opts(options)
    end

    private

    def parse_opts(options, &block)
      parser = OptionParser.new do |opts|
        opts.banner = self.class.usage

        yield opts if block_given?

        opts.on("-h", "--help", "Prints this help") do
          puts opts
          @done = true
        end
      end

      parser.parse!(options)
    end

  end

  class Help < Command
    def run(command=nil)
      if command
        command = Command.list.find { |c| c.command_name == command.to_s }
        puts command.usage ? "Usage:\n#{command.usage}" : "No help for #{command.command_name}"
        return
      else
        puts "Commands:\n#{Command.list.map(&:command_name).join("\t")}"
        return
      end
    end
  end

  class Mv < Command
    usage "mv <remote_path> <new_remote_path>"
    def run(path, new_path)
      raise ShellError, 'No project is selected' if !@shell.project_name

      path = @shell.relative_path(path)
      new_path = @shell.relative_path(new_path)

      name = ::File.basename(path)

      folder = @shell.client.list_folder(@shell.project_name, ::File.dirname(path))

      raise ShellError, "Invalid path, cannot mv #{path}" unless folder

      file = folder[:files].find do |f|
        f[:file_name] == name
      end

      if file
        bucket_name, file_path = path.split('/',2)
        bucket_name, new_file_path = new_path.split('/',2)
        @shell.client.rename_file(@shell.project_name, bucket_name, file_path, new_file_path)
        return
      end

      folder = folder[:folders].find do |f|
        f[:folder_name] == name
      end

      if folder
        bucket_name, folder_path = path.split('/',2)
        bucket_name, new_folder_path = new_path.split('/',2)
        @shell.client.rename_folder(@shell.project_name, bucket_name, folder_path, new_folder_path)
        return
      end
    end
  end

  class Ls < Command
    usage "ls [<remote_folder_or_file_path>]"

    def parse(args)
      parse_opts(args) do |opts|
        opts.on("-l", "--long", "List file properties") do |n|
          options[:long] = true
        end
      end
    end

    def run(file_path=nil)
      raise ShellError, 'No project is selected' if !@shell.project_name

      file_path = @shell.relative_path(file_path)

      if !file_path || file_path == '/'
        display(buckets: @shell.client.list_buckets(@shell.project_name) || [])
        return
      end

      name = ::File.basename(file_path)

      parent_folder = @shell.client.list_folder(@shell.project_name, ::File.dirname(file_path))

      raise ShellError, "Invalid path, cannot list #{file_path}" unless parent_folder

      begin
        file = parent_folder[:files].find do |f|
          f[:file_name] == name
        end

        if file
          file[:file_name] = file_path
          display(
            folders: [],
            files: [file]
          )
          return
        end
      end if parent_folder[:files]

      begin
        folder = @shell.client.list_folder(@shell.project_name, file_path)
      rescue MetisClient::Error
        raise ShellError, "No such file or folder: #{file_path}" unless folder
      end

      display(
        folders: folder[:folders] || [],
        files: folder[:files] || []
      )
    end

    def display(files: [], folders: [], buckets: [])
      if options[:long]
        long_display(files: files, folders: folders, buckets: buckets)
      else
        neat_display(files: files, folders: folders, buckets: buckets)
      end
    end

    def long_display(files: [], folders: [], buckets: [])
      rows = (folders + files).map do |file|
        [
          file[:author].split('|').first.to_s,
          file[:size].to_s,
          DateTime.parse(file[:updated_at]).yield_self { |d|
            d.year < DateTime.now.year ?
              d.strftime("%b %d  %Y") :
              d.strftime("%b %d %H:%M")
          },
          file[:file_name] || "#{file[:folder_name]}/"
        ]
      end + buckets.map do |bucket|
        [
          bucket[:access],
          bucket[:count],
          bucket[:description],
          "#{bucket[:bucket_name]}/"
        ]
      end

      widths = 4.times.map do |i|
        rows.map { |row| row[i].size }.max
      end

      txt = rows.map do |row|
        row.map.with_index { |v,i| "%#{widths[i]}s" % [ v ] }.join(" ")
      end

      puts txt.flatten.join("\n")
    end

    def neat_display(files: [], folders: [], buckets: [])
      entries = [
        *files.map{|f| f[:file_name]},
        *folders.map{|f| f[:folder_name]+"/"},
        *buckets.map{|b| b[:bucket_name]+"/"}
      ].compact.sort

      return if entries.empty?

      rows, cols, col_widths = calculate_dimensions(entries)

      rows.times do |row|
        puts cols.times.map { |col| entries[ col * rows + row ]&.ljust(col_widths[col]) }.join('')
      end
    end

    def calculate_dimensions(entries)
      term_width = ENV['COLUMNS'].to_i
      min_column_width = 3
      max_columns = [term_width/min_column_width + 1, entries.size ].min
      max_columns.downto(1).each do |cols|
        rows, mod = entries.size.divmod(cols)

        if mod != 0
          next if (rows + 1) * (cols - 1) >= entries.size
          rows = rows + 1
        end

        col_widths = (0...cols).map do |col|
          width = (0...rows).map { |row| entries[col * rows + row]&.size }.compact.max
          (col < cols - 1) ? (width + 2) : (width)
        end

        next if col_widths.sum > term_width - 2

        return [ rows, cols, col_widths ]
      end
      return [ entries.size, 1, entries.map{0} ]
    end
  end

  class Project < Command
    usage "project [<project_name>]"
    def run(project_name=nil)
      raise ShellError, "No such project#{project_name && " '#{project_name}'" }. Try:\n#{@shell.project_list.join("\t")}" unless @shell.project_list.include?(project_name)

      @shell.project_name = project_name
      @cwd = nil
      @bucket_names = nil
    end

  end

  class Cd < Command
    usage "cd [<remote_folder_path>]"
    def run(dirname=nil)
      if !dirname
        @shell.cwd = nil
        return
      end

      dirname.sub!(%r!(?<=.)/$!,'')

      path = @shell.relative_path(dirname)

      folder = @shell.client.list_folder(@shell.project_name, path)

      raise ShellError, "Could not find folder #{dirname}" unless folder

      @shell.cwd = path
    end
  end

  class Cp < Command
    usage "cp <source_file_path> <destination_file_path>"
    def run(source_file_path, destination_file_path)
      raise ShellError, 'No source file selected!' unless source_file_path

      raise ShellError, 'No destination file selected!' unless destination_file_path

      if !source_file_path.start_with?('metis://')
        source_file_path.sub!(%r!(?<=.)/$!,'')
        source_file_path = @shell.relative_path(source_file_path)

        source_folder = @shell.client.list_folder(@shell.project_name, ::File.dirname(source_file_path))

        raise ShellError, "Invalid source path #{source_file_path}" unless source_folder

        file = source_folder[:files].find do |f|
          f[:file_name] == ::File.basename(source_file_path)
        end

        raise ShellError, "That source file does not exist #{source_file_path}" unless file
      end

      if !destination_file_path.start_with?('metis://')
        destination_file_path.sub!(%r!(?<=.)/$!,'')
        destination_file_path = @shell.relative_path(destination_file_path)

        # Need to account for user providing a directory without a filename...
        begin
          folder = @shell.client.list_folder(@shell.project_name, destination_file_path)
          source_file_name = source_file_path.split('/').last
          destination_file_path = "#{destination_file_path}/#{source_file_name}" if folder
        rescue MetisClient::Error
          # Not a folder, so we'll keep the path
        end
      end

      @shell.client.copy_file(
        @shell.project_name,
        source_file_path,
        destination_file_path)
    end
  end

  class Rm < Command
    usage "rm <remote_path>"
    def run(path)
      raise ShellError, 'No project is selected' if !@shell.project_name

      path = @shell.relative_path(path)

      name = ::File.basename(path)

      folder = @shell.client.list_folder(@shell.project_name, ::File.dirname(path))

      raise ShellError, "Invalid path, cannot rm #{path}" unless folder

      file = folder[:files].find do |f|
        f[:file_name] == name
      end

      if file
        @shell.client.remove_file(@shell.project_name, path)
        return
      end

      folder = folder[:folders].find do |f|
        f[:folder_name] == name
      end

      if folder
        @shell.client.remove_folder(@shell.project_name, path)
        return
      end

      raise ShellError, "Invalid path, cannot remove: #{path}" unless file || folder
    end
  end

  class Mkdir < Command
    usage "mkdir <remote_path>"
    def run(path)
      raise ShellError, 'No project is selected' if !@shell.project_name

      path = @shell.relative_path(path)

      begin
        folder = @shell.client.list_folder(@shell.project_name, path)

        raise ShellError, "Folder already exists #{path}" if folder
      rescue MetisClient::Error
        # parent folder may not exist, but that's okay. This command
        #   replicates `mkdir -p` so parent folders do not have to
        #   exist a priori.
      end

      @shell.client.create_folder(@shell.project_name, path)
    end
  end

  class Pwd < Command
    usage "pwd"
    def run
      puts Dir.pwd
    end
  end

  class Lcd < Command
    usage "lcd <local_folder_path>"
    def run(dirname)
      dirname = ::File.expand_path(dirname)
      raise ShellError, 'No such directory!' unless ::File.directory?(dirname)
      Dir.chdir(dirname)
    end
  end

  class Get < Command
    usage "get <remote_folder_path> <local_path>"

    def run(folder_path, local_path)
      raise ShellError, 'No remote folder selected!' unless @shell.relative_path(folder_path)

      path = local_path =~ %r!^/! ?
        local_path :
        Pathname.new(::File.join(*[Dir.pwd, local_path].compact)).cleanpath.to_s

      download_folder(@shell.relative_path(folder_path), ::File.join(local_path, ::File.basename(folder_path)))
    end

    private

    def download_file(file, output_path)

      actual_file = "#{output_path}/#{file[:file_name]}"

      return if ::File.exists?(actual_file) && ::File.size(actual_file) == file[:size]

      FileUtils::mkdir_p(output_path)

      open(actual_file,"w") do |io|
        download_path = file[:download_url].sub(%r!^https://[^/]*?/!, '/')
        completed = 0.0
        size = file[:size]
        start = Time.now
        @shell.client.get_file(download_path) do |chunk|
          io.write chunk

          completed += chunk.size
          print progress(
            size == 0 ? 1 : completed / size,
            (completed / (Time.now - start)).round(2),
            file[:file_path]
          )
        end
        puts
      end
    end

    def download_folder(folder_path, output_path)
      folder = @shell.client.list_folder(@shell.project_name, folder_path)

      folder[:files].each do |file|
        download_file(file, output_path)
      end

      folder[:folders].each do |sub_folder|
        download_folder(
          ::File.join(sub_folder[:bucket_name], sub_folder[:folder_path]),
          ::File.join(output_path, sub_folder[:folder_name])
        )
      end
    end
  end

  class Put < Command
    usage "put <input_file1> ... [<input_fileN>] <remote_folder_path>"
    def run(*input_files, folder_path)
      raise ShellError, 'No remote folder selected!' unless folder_path

      raise ShellError, 'No input files selected!' if input_files.empty?

      # get a listing of the folder
      folder = @shell.client.list_folder(@shell.project_name, @shell.relative_path(folder_path))

      input_files.each do |file_or_folder|
        upload(file_or_folder, @shell.cwd, folder)
      end
    end

    private

    def upload(file_or_folder, folder_path, folder)
      if ::File.directory?(file_or_folder)
        upload_folder(file_or_folder, folder_path, folder)
      elsif ::File.file?(file_or_folder)
        upload_file(file_or_folder, folder_path, folder)
      else
        puts "Invalid input #{file_or_folder}"
      end
    end

    def upload_folder(input_folder, folder_path, folder)
      actual_path = ::File.expand_path(input_folder)
      folder_name = ::File.basename(actual_path)
      new_folder_path = ::File.join(folder_path, folder_name).sub(%r!^/!,'')

      # see if it exists
      existing_folder = folder[:folders].find do |f|
        f[:folder_name] == folder_name
      end

      if existing_folder
        new_folder = @shell.client.list_folder(@shell.project_name, new_folder_path)
      else
        @shell.client.create_folder(@shell.project_name, new_folder_path)
        new_folder = { folders: [], files: [] }
      end

      Dir["#{actual_path}/*"].each do |file_or_folder|
        upload(file_or_folder, new_folder_path, new_folder)
      end
    end

    def upload_file(input_file, folder_path, folder)
      # We go through the full upload cycle. First, authorize the upload
      actual_path = ::File.expand_path(input_file)
      file_name = ::File.basename(actual_path)
      bucket_name, new_folder_path = folder_path.split('/',2)
      new_file_path = ::File.join(*[new_folder_path, file_name].compact)

      # see if it exists
      return if folder[:files].find do |f|
        f[:file_name] == file_name && f[:size] == ::File.size(actual_path)
      end

      upload_json = @shell.client.authorize_upload(@shell.project_name, bucket_name, new_file_path)

      upload_path = upload_json[:url].sub(%r!^https://[^/]*?/!, '/')

      upload = Upload.new(actual_path)

      upload_json = @shell.client.start_upload(upload_path, upload)
      # start our upload

      upload.current_byte_position = upload_json[:current_byte_position].to_i
      upload.next_blob_size = upload_json[:next_blob_size].to_i

      max_number_attempts = MetisConfig[:max_attempts] || 2
      current_attempt_number = 1

      while current_attempt_number <= max_number_attempts do
        begin
          # upload bytes until we are done

          if upload.complete?
            reset_required = @shell.client.blob_upload(upload_path, upload,
              blob_data: '',
              next_blob_size: 0,
              next_blob_hash: ZERO_HASH,
              current_byte_position: upload.current_byte_position
            )

            puts progress(1, 0, new_file_path)
            return
          end

          start = Time.now
          while !upload.complete?

            blob_data = upload.current_bytes
            current_byte_position = upload.current_byte_position

            upload.next_blob!

            @shell.client.blob_upload(upload_path, upload,
              blob_data: blob_data,
              next_blob_size: upload.next_blob_size,
              next_blob_hash: upload.next_blob_hash,
              current_byte_position: current_byte_position
            )

            print progress(
              upload.current_byte_position.to_f / upload.file_size,
              (upload.current_byte_position / (Time.now - start).to_f).round(2),
              new_file_path
            )
          end
          puts
          break
        rescue MetisClient::UploadError => e
          puts "#{e.message}"
          current_attempt_number += 1

          if current_attempt_number <= max_number_attempts
            puts "UploadError -- retrying the upload"
            MetisShell.log_error(e)
            upload = Upload.new(actual_path)
            upload_json = @shell.client.reset_upload(upload_path, upload)
            upload.current_byte_position = 0
          else
            puts "UploadError -- max retries reached. Giving up."
            MetisShell.log_error(e)
          end
        end
      end
    end
  end

  class ShellError < StandardError
  end

  METIS_PATH=%r!
    ^metis:/(?<path>/.*)?$
  !x

  def initialize(path, *args)
    @token = ENV['TOKEN']

    if !@token
      puts "No environment variable TOKEN is set. Set your token with `export TOKEN=<your.janus.token>` before running metis_client."
      exit
    end

    if token_expired?
      puts "Your token is expired. Please provide a new one in your environment."
      exit
    end

    match = METIS_PATH.match(path)

    @host = MetisConfig[:metis_host]

    @args = args

    raise 'No metis host selected' if !@host

    if match&.[](:path)
      set_path(match[:path])
    end
  end

  attr_reader :project_name
  attr_accessor :cwd

  def project_name=(new_project)
    @project_name = new_project
    @cwd = nil
  end

  def set_path(path)
    @project_name, *folder_path = path.split(%r!/!).compact.reject(&:empty?)

    return unless @project_name

    unless project_list.include?(@project_name)
      puts "No such project '#{@project_name}'"
      @project_name = nil
    end

    return unless folder_path && !folder_path.empty?

    if path = folder_path.join("/")
      begin
        client.list_folder(@project_name, path)
        @cwd = path
      rescue MetisClient::Error
        puts "No such folder '#{path}'"
        @cwd = nil
      end
    end
  end

  def prompt
    "#{@project_name && "#{@project_name}:#{@cwd}"}> "
  end

  def complete(string)
    return project_list.grep(/^#{Regexp.escape(string)}/) unless @project_name

    if string[-1] == '/'
      dirname = string[0...-1]
      basename = ''
    else
      basename, dirname = string.split(%r!/(?=[^/]*$)!).reverse
    end

    begin
      path = Shellwords.split(relative_path(dirname) || '').first
      basename = Shellwords.split(basename || '').first
      if path
        folder = client.list_folder(@project_name, path)
        return [] unless folder && folder.is_a?(Hash)

        return [
          folder[:folders]&.map{|f| f[:folder_name]+"/"},
          folder[:files]&.map{|f| f[:file_name]+" "}
        ]
          .flatten.compact
          .grep(/^#{basename}/)
          .map{|s| [dirname, s].compact.join('/').gsub(/(?<!\\) (?!$)/, '\ ')}
      else
        return client.list_buckets(@project_name).map{|b| b[:bucket_name]+'/'}.grep(/^#{basename}/)
      end
    rescue MetisClient::Error
      []
    end
  end

  def run
    unless @args.empty?
      command, *args = @args
      run_command(command, *args)
      return
    end

    Readline.completion_proc = proc do |string|
      complete(string)
    end
    Readline.completer_quote_characters = "\"'"
    Readline.completion_append_character = nil
    Readline.basic_word_break_characters = " \t\n\"'`@$><=;|&{("
    Readline.quoting_detection_proc = proc do |input, index|
      (
        # you are not the first character
        index > 0 &&
        # you are a space
        input[index] == ' ' &&
        # the previous character is a slash
        input[index-1] == '\\' &&
        # the character before that does not exist, or it is not a slash
        (index == 1 || input[index-2] != '\\')
      ) || (
        # you are not the last character
        (index + 1 < input.size) &&
        # you are a slash
        input[index] == '\\' &&
        # the character after you is a space
        input[index+1] == ' ' &&
        # the character before you does not exist or it is not a slash
        (index == 0 || input[index-1] != '\\')
      )
    end

    while buf = Readline.readline(prompt, true)
      run_command(*parse(buf))
    end
  end

  def client
    @client ||= MetisClient.new(@host, @token)
  end

  def relative_path(file_path=nil)
    path = case file_path
    when '.', nil then @cwd
    when '/' then nil
    when %r!^/! then file_path.gsub(%r!^/!,'')
    else
      Pathname.new(::File.join(*[@cwd, file_path].compact)).cleanpath.to_s
    end
    path unless path =~ /^\./
  end

  def project_list
    @project_list ||= begin
      JSON.parse(
        Base64.decode64(@token.split(/\./)[1])
      )["perm"].split(/;/).map{|l| l.split(/:/).last.split(/,/) }.flatten
    rescue
      puts "Could not parse token"
      []
    end
  end

  private

  def self.log_error(e)
    STDERR.puts(e.message)
  end

  def run_command(command=nil, *args)
    return if !command
    command = Command.list.find { |c| c.command_name == command.to_s }

    unless command
      puts "Invalid command. Try:\n#{Command.list.map(&:command_name).join("\t")}"
      return
    end

    begin
      cmd = command.new(self)
      args = cmd.parse(args)
      cmd.run(*args) unless cmd.done?
    rescue ShellError => e
      MetisShell.log_error(e)
    rescue MetisClient::Error => e
      MetisShell.log_error(e)
    rescue ArgumentError => e
      puts(command.usage ? "Usage:\n#{command.usage}" : e.message)
      MetisShell.log_error(e)
    rescue Net::ReadTimeout => e
      MetisShell.log_error(e)
    end
  end

  VALID_INPUT=/^(?<command>\w+)(?:\s+(?<args>.*))?$/

  def parse(line)
    input = VALID_INPUT.match(line)

    return nil unless input
    return [
      input[:command],
      *Shellwords.split(input[:args] || '')
    ]
  end

  # This is duplicated code because we need to refactor Metis client
  #   to use the etna gem clients...
  def token_expired?
    # Has the token already expired?
    token_will_expire?(0)
  end

  def token_will_expire?(offset=3000)
    # Will the user's token expire in the given amount of time?
    epoch_seconds = JSON.parse(Base64.urlsafe_decode64(@token.split('.')[1]))["exp"]
    expiration = DateTime.strptime(epoch_seconds.to_s, "%s")
    expiration <= DateTime.now.new_offset + offset
  end
end


class MetisSetup
  def run
    if config_exists?
      puts "Found configuration at #{CONFIG_FILE}, skipping setup."
      exit
    end

    config_file_name = get_value("Location for config file", CONFIG_FILE) do |file_name|
      true_file_name = ::File.expand_path(file_name)

      next("Cannot write to #{file_name}") if ::File.directory?(true_file_name) || !::File.writable?(::File.dirname(true_file_name))

      false
    end

    save_config(
      config_file_name,
      metis_uid: SecureRandom.hex,

      metis_uid_name: get_value("Cookie name for metis uid", "METIS_UID") { |m| m !~ /^\w+$/ },

      metis_host: get_value("Hostname for metis", "metis.example.org") do |metis_host|
        begin
          Resolv.getaddress metis_host
        rescue Resolv::ResolvError
          if Readline.readline("Could not resolve #{metis_host}, use anyway? (y/n) ",false) != "y"
            next("Invalid host")
          end
        end
        false
      end
    )
  end

  def save_config(config_file_name, config)
    File.open(::File.expand_path(config_file_name), 'w') do |f|
      f.puts JSON.pretty_generate(config)
    end

    # replace the variable CONFIG_FILE above
    script = File.read(__FILE__)
    File.open(__FILE__,"w") do |f|
      f.puts script.gsub(/^CONFIG_FILE=.*/,"CONFIG_FILE='#{config_file_name}'")
    end

    puts "Config saved at #{config_file_name}"
    return config
  end

  def get_value(prompt, default)
    value = nil
    until value do
      value = Readline.readline("#{prompt}? [#{default}] ",false)
      value = value.nil? || value.empty? ? default : value

      error = yield(value)

      if error
        puts error
        value = nil
      end
    end
    value
  end
end

def start
  config = config_exists? ?
    JSON.parse(File.read(::File.expand_path(CONFIG_FILE)), symbolize_names: true)
  :
    MetisSetup.new.run

  MetisConfig.instance.config(config)
  MetisShell.new(ARGV[0], *ARGV[1..-1]).run
  puts
end

start unless test_env?
