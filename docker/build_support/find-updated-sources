#! /usr/bin/env bash
set -e

echo 'find-updated-sources'

prog=$0
error() {
   echo "Whoops!  Looks like $0:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

function usage() {
  echo "$0 <dir>" 1>&2
}

RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
NC='\033[0m'

# Set the appropriate readlink command based on the operating system
# Note: use this only for the -m flag
if [ "$(uname -s)" = "Darwin" ]; then
  READLINK_M="greadlink -m"
else
  READLINK_M="readlink -m"
fi

dir=$($READLINK_M $1)
touchTarget=$2
find=find
if type -p gfind; then
  find=gfind
fi

$find $dir -type f ! -path '*/coverage/*' ! -path '*/logs/*' ! -path "*.marker" ! -path '*/node_modules/*' ! -path '*/.bundle/config' ! -path '*/npm-cache/*' ! -path '*/__pycache__/*' -printf "%T+ %p\n" | sort | tail -1 | cut -d ' ' -f2