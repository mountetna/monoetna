#! /usr/bin/env bash
set -e
set -o pipefail

prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

PATH="$DIR/../bin:$PATH"

yq() {
  docker run --rm -i -v /tmp:/workdir mikefarah/yq yq $@
}

if [[ -e $1 ]]; then
  cp $1 /tmp/composed.yml
else
  echo > /tmp/composed.yml
fi

APP_NAME=$(basename "$(dirname "$(realpath "$1")")")
APP_DASH_PREFIX=${APP_NAME}-
APP_ENV_PREFIX=$(echo "$APP_NAME" | tr '[:lower:]' '[:upper:]')_
# Historical compose.yml naming
[[ $APP_NAME == "metis" ]] && APP_DASH_PREFIX=

function findKeyRange() {
  IFS=$'\n'
  local lineno=0
  local start=
  local end=
  while read line; do
    lineno=$((lineno+1))
    if [[ -z "$start" ]]; then
      ! [[ "$line" =~ ^"${2}": ]] && continue
      start=$lineno
    else
      ! [[ "$line" =~ ^[^\ #] ]] && continue
      end=$lineno
      break
    fi
  done < $1

  [[ -z "$start" ]] && lineno=0 && start=1
  [[ -z "$end" ]] && end=$((lineno + 1))
  echo "$start,$end"
}

function getKey() {
  local start="$(findKeyRange $1 $2 | cut -d ',' -f1)"
  local end="$(findKeyRange $1 $2 | cut -d ',' -f2)"
  cat $1 | tail -n+$start | head -n $((end - start))
  echo \#
}

function replaceKey() {
  replacement="${3%?}"
  IFS= local start="$(findKeyRange $1 $2 | cut -d ',' -f1)"
  IFS= local end="$(findKeyRange $1 $2 | cut -d ',' -f2)"
  IFS= local head="$(cat $1 | head -n $((start - 1)); echo \#)"
  IFS= local tail="$(cat $1 | tail -n+$((end)); echo \#)"

  head="${head%?}"
  tail="${tail%?}"

  echo "$head
$replacement
$tail" > $1
}

sed=sed
if type -p gsed > /dev/null; then
  sed=gsed
fi

set -f
idx=0
for mergeTarget in $COMPOSE_MIXINS; do
  echo "Applying $mergeTarget to $1"
  cp $DIR/$mergeTarget /tmp/
  $sed 's@${APP_NAME}@'"$APP_NAME"'@g' -i /tmp/$mergeTarget
  $sed 's@${APP_DASH_PREFIX}@'"$APP_DASH_PREFIX"'@g' -i /tmp/$mergeTarget
  $sed 's@${APP_ENV_PREFIX}@'"$APP_ENV_PREFIX"'@g' -i /tmp/$mergeTarget

  IFS=$'\n'
  for key in $(yq r -p p $mergeTarget "*" | tac); do
    idx=$((idx + 1))
    echo "Applying key $key"
    if [[ $key =~ x-.* ]]; then
      # Anchored extension keys
      replaceKey /tmp/composed.yml $key "$(getKey /tmp/$mergeTarget $key)"
    else
      # Top level keys
      yq r -D ' ' -p pv composed.yml "$key" > /tmp/a
      yq r -D ' ' -p pv $mergeTarget "$key" > /tmp/b
      yq m a b > /tmp/c
      echo >> /tmp/c


      IFS= replaceKey /tmp/composed.yml $key "$(getKey /tmp/c $key)"
    fi
    cp /tmp/composed.yml /tmp/composed.yml.${idx}
    echo $key >> /tmp/composed.yml.${idx}
  done
  unset IFS
done

cat -s /tmp/composed.yml > /tmp/composed.yml.a
mv /tmp/composed.yml.a $1
