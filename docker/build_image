#! /usr/bin/env bash
set -e

prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

cd $DIR/..

function usage() {
  echo "$0 [-f] [-d] <Dockerfile> [<dep> [<dep2> ...]]" 1>&2
}

force=
digestOnly=
if [[ "$1" == "-f" ]]; then
    force=1
    shift
fi

if [[ "$1" == "-d" ]]; then
    digestOnly=1
    shift
fi

Dockerfile=$1
tag=$(dirname $Dockerfile)
tag="${IMAGES_PREFIX}${tag}${IMAGES_POSTFIX}"

if [[ -z "$Dockerfile" ]]; then
    usage
    exit 1
fi

shift; shift

digest=
newestFile=$Dockerfile
function addToDigest() {
     digest=$(echo $(cat) $digest | md5sum | cut -d ' ' -f1)
}
function recursiveDigest() {
     find "$1" -type f -exec md5sum {} \;
}
function findNewest() {
    lastModifiedFile=$(find $1 -printf "%T+ %p\n" | sort | tail -1 | cut -d ' ' -f2)
    if [ "$lastModifiedFile" -nt "$newestFile" ]; then
        newestFile="$lastModifiedFile"
     fi
}

cat $0 | addToDigest

MARKERS_DIR=${MARKERS_DIR:-/tmp/etna-build-markers}
mkdir -p $MARKERS_DIR

mounts="-v /var/run/docker.sock:/var/run/docker.sock:ro"
mounts="$mounts --mount type=bind,source=$(realpath $(dirname $Dockerfile)),target=/build"
recursiveDigest "$(dirname $Dockerfile)" | addToDigest
findNewest "$(dirname $Dockerfile)"

while (( "$#" )); do
    mounts="$mounts --mount type=bind,source=$(realpath $1),target=/build/$(basename $1)"
    recursiveDigest "$(realpath $1)" | addToDigest
    findNewest "$1"
    shift
done

if ! [[ -z "$onlyDigest" ]]; then
  echo "$Dockerfile $digest"
  exit 0
fi

marker=$MARKERS_DIR/$(dirname $Dockerfile)
if [[ -z "$force" && "$newestFile" -ot "$marker" ]]; then
  echo "Image $tag already up to date, skipping build"
  exit 0
fi

sleep 1
touch $marker

# For ci to pull before building again.
if ! [[ -z "$PULL_IMAGES" ]]; then
  docker pull $tag
fi

BUILD_CMD="docker build --tag $tag --cache-from $tag -f $(basename $Dockerfile) ."
docker run --rm -w /build $mounts docker:19.03.12 $BUILD_CMD
