export COMPOSE_PROJECT_NAME=monoetna
export NODE_ENV=development
export MONOETNA_SHA=$(shell git rev-parse HEAD)
export DOCKER_DEFAULT_PLATFORM=linux/amd64

# The following set of targets can be used as an alternative to calling into the original make system,
# this is specifically designed for Mac

### Images targets ###

# Build all docker images for local development, note the order is extremely important here, as many images
# depend on the previous images.

.PHONY: build
build-dev-dep-images:
	# Stand alone
	echo "Building stand alone docker images..."
	cd known_hosts && docker build . -t known_hosts
	cd bash_mocker &&  docker build . -t bash_mocker
	cd development-certs && docker build . -t development-certs
	cd docker/development-psql && docker build . -t development-psql
	# cd docker/deployer_base && docker build . -t deployer-base

	# Apache
	echo "Building apache images..."
	cd docker/etna-apache && docker build . -t etna-apache
	cd edge-apache && docker build . -t edge-apache

	# Etna base images
	echo "Building etna images..."
	cd docker/etna-base-dev && docker build . -t etna-base-dev
	cd etna && docker build . -t etna
	cd docker/etna-base && docker build . -t etna-base

	# Airflow
	echo "Building airflow images..."
	cd airflow-code-editor && docker build . -t airflow-code-editor
	cd etna/packages/etna-py && docker build . -t etna-py
	cd airflow && docker build . -t airflow

	# Archimedes
	echo "Building archimedes images..."
	cd docker/archimedes-base && docker build . -t archimedes-base
	cd archimedes-r-base && docker build . -t archimedes-r-base # takes a really long time!
	cd docker/archimedes-node-base && docker . build -t archimedes-node-base


### Project level targets ###

# Note: the project level docker-compose files use relative paths so it is important to execute commands from within
# the project directory

## Etna ##

etna-up:
	cd edge-apache &&  docker-compose up -d
	cd etna && docker-compose up -d

etna-install-libs:
	cd etna && docker-compose run --rm -e FULL_BUILD=1 -e UPDATE_STATE=1 etna_app bundle install
	cd etna && docker-compose run --rm -e FULL_BUILD=1 -e UPDATE_STATE=1 etna_app bash -c 'cd packages/etna-js && npm install'
	cd etna && docker-compose run --rm -e FULL_BUILD=1 -e UPDATE_STATE=1 etna_app bash -c 'npm install --unsafe-perm'

## Magma ##

magma-up:
	cd edge-apache && docker-compose up -d
	cd magma && docker-compose up -d
	# Note magma_webpack is expected to fail

magma-migrate:
	# Seems to fail after run once
	cd magma && docker-compose run --rm -e UPDATE_STATE=1 magma_app

## Janus ##

janus-up:
	cd edge-apache && docker-compose up -d
	cd janus && docker-compose up -d

janus-migrate:
	cd janus && docker-compose run --rm -e UPDATE_STATE=1 janus_app

janus-seed:
	./bin/seed_janus

## Timur ##

timur-up:
	cd edge-apache && docker-compose up -d
	cd timur && docker-compose up -d

timur-migrate:
	cd timur && docker-compose run --rm -e UPDATE_STATE=1 -e FULL_BUILD=1 timur_app

## Gnomon ##

gnomon-up:
	cd gnomon && docker-compose up -d
	cd edge-apache &&  docker-compose up -d

gnomon-migrate:
	cd gnomon && docker-compose run --rm -e UPDATE_STATE=1 gnomon_app

## Metis ##

metis-up:
	cd edge-apache &&  docker-compose up -d
	cd metis && docker-compose up -d

metis-migrate:
	cd metis && docker-compose run --rm -e UPDATE_STATE=1 metis_app

### Clean targets ###

remove-all-containers:
	docker-compose down

stop-all-containers:
	docker-compose stop