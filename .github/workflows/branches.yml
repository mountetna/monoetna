name: Run Ruby app tests
on:
  push:
    branches:
      - '*'
      - '*/*'
      - '*/*/*'
      - '!master'
      - '!swarm/stacks'
      - '!production'
      - '!staging'
      - '!production-build'
      - '!staging-build'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-app:
          - metis
          - magma
          - janus
          - vulcan
          - polyphemus
          - timur
          - etna
          - archimedes
          - deployer
          - airflow
          - archimedes-node
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: docker login -p "${DOCKER_TOKEN}" -u etnaagent
      - name: Run ${{ matrix.test-app }} test suite
        id: app_first_test_run
        env:
          # Runs tests and builds images, but does not push (PUSH_IMAGES not set to 1)
          IMAGES_PREFIX: etnaagent/
          IS_CI: 1
          CI_SECRET: ${{ secrets.CI_SECRET }}
          IMAGES_POSTFIX: :master
        run: |
          make -C ${{ matrix.test-app }} release
  perform-release-windows:
    runs-on: windows-2019
#    needs: create-release
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v2

      - name: "Install libraries"
        run: |
          choco install --no-progress squashfs
          choco install wget
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.1

      - name: install dependencies
        run: |
          cd etna
          bundle install

      - name: "Inspect Windows Environment"
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo on
          wmic OS get OSArchitecture
          echo %PROCESSOR_ARCHITECTURE%
          set
          systeminfo
          where perl
          perl -V
          where nmake
          where mksquashfs
          mksquashfs -version
          where ruby
          ruby -v
          where bundle
          bundle -v
        shell: cmd

      - name: Get ruby-packer
        run: |
          wget https://github.com/pmq20/ruby-packer/releases/download/windows-x64/rubyc.exe
          dir
          copy rubyc.exe C:\strawberry\c\bin\rubyc.exe
          del rubyc.exe
          rubyc.exe -v

      - name: Build executable
        run: |
          cd etna
          dir
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          rubyc.exe bin\etna -o bin\etna.exe --tmpdir=C:\rubyc_tm

      - name: Test executable
        run: |
          cd bin
          dir
          etna.exe


#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create-release.outputs.upload_url }}
#          asset_path: ./build/dist/cross-compile-demo.zip
#          asset_name: cross-compile-demo_windows_amd64.zip
#          asset_content_type: application/zip
