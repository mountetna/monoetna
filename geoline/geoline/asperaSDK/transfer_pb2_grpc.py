# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import transfer_pb2 as transfer__pb2


class TransferServiceStub(object):
    """
    Transfer service definition. This service enables users to start, manage and monitor transfers.
    You can also  get information about the transfer service settings and confirm the availability of
    communication between the engine and a remote transfer server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Validate = channel.unary_unary(
                '/transfersdk.TransferService/Validate',
                request_serializer=transfer__pb2.ValidationRequest.SerializeToString,
                response_deserializer=transfer__pb2.ValidationResponse.FromString,
                )
        self.StartTransfer = channel.unary_unary(
                '/transfersdk.TransferService/StartTransfer',
                request_serializer=transfer__pb2.TransferRequest.SerializeToString,
                response_deserializer=transfer__pb2.StartTransferResponse.FromString,
                )
        self.StartTransferWithMonitor = channel.unary_stream(
                '/transfersdk.TransferService/StartTransferWithMonitor',
                request_serializer=transfer__pb2.TransferRequest.SerializeToString,
                response_deserializer=transfer__pb2.TransferResponse.FromString,
                )
        self.QueryTransfer = channel.unary_unary(
                '/transfersdk.TransferService/QueryTransfer',
                request_serializer=transfer__pb2.TransferInfoRequest.SerializeToString,
                response_deserializer=transfer__pb2.QueryTransferResponse.FromString,
                )
        self.ModifyTransfer = channel.unary_unary(
                '/transfersdk.TransferService/ModifyTransfer',
                request_serializer=transfer__pb2.TransferModificationRequest.SerializeToString,
                response_deserializer=transfer__pb2.TransferModificationResponse.FromString,
                )
        self.AddTransferPaths = channel.unary_unary(
                '/transfersdk.TransferService/AddTransferPaths',
                request_serializer=transfer__pb2.TransferPathRequest.SerializeToString,
                response_deserializer=transfer__pb2.TransferPathResponse.FromString,
                )
        self.LockPersistentTransfer = channel.unary_unary(
                '/transfersdk.TransferService/LockPersistentTransfer',
                request_serializer=transfer__pb2.LockPersistentTransferRequest.SerializeToString,
                response_deserializer=transfer__pb2.LockPersistentTransferResponse.FromString,
                )
        self.StopTransfer = channel.unary_unary(
                '/transfersdk.TransferService/StopTransfer',
                request_serializer=transfer__pb2.StopTransferRequest.SerializeToString,
                response_deserializer=transfer__pb2.StopTransferResponse.FromString,
                )
        self.MonitorTransfers = channel.unary_stream(
                '/transfersdk.TransferService/MonitorTransfers',
                request_serializer=transfer__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=transfer__pb2.TransferResponse.FromString,
                )
        self.GetAPIVersion = channel.unary_unary(
                '/transfersdk.TransferService/GetAPIVersion',
                request_serializer=transfer__pb2.APIVersionRequest.SerializeToString,
                response_deserializer=transfer__pb2.APIVersionResponse.FromString,
                )
        self.GetInfo = channel.unary_unary(
                '/transfersdk.TransferService/GetInfo',
                request_serializer=transfer__pb2.InstanceInfoRequest.SerializeToString,
                response_deserializer=transfer__pb2.InstanceInfoResponse.FromString,
                )
        self.IsPeerReachable = channel.unary_unary(
                '/transfersdk.TransferService/IsPeerReachable',
                request_serializer=transfer__pb2.PeerCheckRequest.SerializeToString,
                response_deserializer=transfer__pb2.PeerCheckResponse.FromString,
                )
        self.WriteStreamChunk = channel.stream_unary(
                '/transfersdk.TransferService/WriteStreamChunk',
                request_serializer=transfer__pb2.WriteStreamChunkRequest.SerializeToString,
                response_deserializer=transfer__pb2.WriteStreamChunkResponse.FromString,
                )
        self.WriteStream = channel.stream_unary(
                '/transfersdk.TransferService/WriteStream',
                request_serializer=transfer__pb2.WriteStreamRequest.SerializeToString,
                response_deserializer=transfer__pb2.WriteStreamResponse.FromString,
                )
        self.ReadStream = channel.unary_stream(
                '/transfersdk.TransferService/ReadStream',
                request_serializer=transfer__pb2.ReadStreamRequest.SerializeToString,
                response_deserializer=transfer__pb2.ReadStreamResponse.FromString,
                )


class TransferServiceServicer(object):
    """
    Transfer service definition. This service enables users to start, manage and monitor transfers.
    You can also  get information about the transfer service settings and confirm the availability of
    communication between the engine and a remote transfer server.
    """

    def Validate(self, request, context):
        """
        Validate accepts a transfer spec string and a transfer type, and returns the validation result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTransfer(self, request, context):
        """
        StartTransfer starts a new transfer and returns the transfer information required to manage and monitor the transfer.
        This request doesn't close until the transfer is terminated or the request is canceled by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTransferWithMonitor(self, request, context):
        """
        StartTransferWithMonitor starts a new transfer and streams back the transfer events.
        The request doesn't return immediately, as it continues streaming responses to the client until the transfer is terminated or the request is canceled
        by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryTransfer(self, request, context):
        """
        QueryTransfer requests transfer data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyTransfer(self, request, context):
        """
        ModifyTransfer modifies an existing transfer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTransferPaths(self, request, context):
        """
        AddTransferPaths can be used with persistent transfer to add paths to an existing transfer.
        (type TransferType.FILE_PERSISTENT).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockPersistentTransfer(self, request, context):
        """
        LockPersistentTransfer, used with persistent transfer, marks an existing persistent transfer as done.
        Once the method is called, any subsequent call to AddTransferPaths results in an error.
        (type TransferType.FILE_PERSISTENT).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTransfer(self, request, context):
        """
        StopTransfer stops a transfer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorTransfers(self, request, context):
        """
        MonitorTransfers monitors transfers matching the defined filters and streams back the transfer events.
        The request doesn't return an immediate response because MonitorTransfers continues streaming
        responses to the client until the client cancels the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAPIVersion(self, request, context):
        """
        GetAPIVersion gets the API version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfo(self, request, context):
        """
        GetInfo gets data about the Transfer SDK service instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPeerReachable(self, request, context):
        """
        IsPeerReachable confirms whether or not the peer endpoint is reachable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteStreamChunk(self, request_iterator, context):
        """
        WriteStreamChunk writes chunks of streaming data for the specified in-progress
        transfer of type PERSISTENT_STREAM_UPLOAD, at a specific offset.
        When StopTransfer is called on the transfer, subsequent calls to this function will fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteStream(self, request_iterator, context):
        """
        WriteStream writes chunks of streaming data for the specified in-progress transfer of type STREAM_TO_FILE_UPLOAD.
        Once StopTransfer is called on the transfer, subsequent calls to this function will fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadStream(self, request, context):
        """
        ReadStream reads chunks of streaming data from a specified in-progress transfer of type FILE_TO_STREAM_DOWNLOAD.
        Once StopTransfer is called on this transfer, subsequent calls to this function will fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Validate': grpc.unary_unary_rpc_method_handler(
                    servicer.Validate,
                    request_deserializer=transfer__pb2.ValidationRequest.FromString,
                    response_serializer=transfer__pb2.ValidationResponse.SerializeToString,
            ),
            'StartTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTransfer,
                    request_deserializer=transfer__pb2.TransferRequest.FromString,
                    response_serializer=transfer__pb2.StartTransferResponse.SerializeToString,
            ),
            'StartTransferWithMonitor': grpc.unary_stream_rpc_method_handler(
                    servicer.StartTransferWithMonitor,
                    request_deserializer=transfer__pb2.TransferRequest.FromString,
                    response_serializer=transfer__pb2.TransferResponse.SerializeToString,
            ),
            'QueryTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTransfer,
                    request_deserializer=transfer__pb2.TransferInfoRequest.FromString,
                    response_serializer=transfer__pb2.QueryTransferResponse.SerializeToString,
            ),
            'ModifyTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyTransfer,
                    request_deserializer=transfer__pb2.TransferModificationRequest.FromString,
                    response_serializer=transfer__pb2.TransferModificationResponse.SerializeToString,
            ),
            'AddTransferPaths': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransferPaths,
                    request_deserializer=transfer__pb2.TransferPathRequest.FromString,
                    response_serializer=transfer__pb2.TransferPathResponse.SerializeToString,
            ),
            'LockPersistentTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.LockPersistentTransfer,
                    request_deserializer=transfer__pb2.LockPersistentTransferRequest.FromString,
                    response_serializer=transfer__pb2.LockPersistentTransferResponse.SerializeToString,
            ),
            'StopTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTransfer,
                    request_deserializer=transfer__pb2.StopTransferRequest.FromString,
                    response_serializer=transfer__pb2.StopTransferResponse.SerializeToString,
            ),
            'MonitorTransfers': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorTransfers,
                    request_deserializer=transfer__pb2.RegistrationRequest.FromString,
                    response_serializer=transfer__pb2.TransferResponse.SerializeToString,
            ),
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=transfer__pb2.APIVersionRequest.FromString,
                    response_serializer=transfer__pb2.APIVersionResponse.SerializeToString,
            ),
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=transfer__pb2.InstanceInfoRequest.FromString,
                    response_serializer=transfer__pb2.InstanceInfoResponse.SerializeToString,
            ),
            'IsPeerReachable': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPeerReachable,
                    request_deserializer=transfer__pb2.PeerCheckRequest.FromString,
                    response_serializer=transfer__pb2.PeerCheckResponse.SerializeToString,
            ),
            'WriteStreamChunk': grpc.stream_unary_rpc_method_handler(
                    servicer.WriteStreamChunk,
                    request_deserializer=transfer__pb2.WriteStreamChunkRequest.FromString,
                    response_serializer=transfer__pb2.WriteStreamChunkResponse.SerializeToString,
            ),
            'WriteStream': grpc.stream_unary_rpc_method_handler(
                    servicer.WriteStream,
                    request_deserializer=transfer__pb2.WriteStreamRequest.FromString,
                    response_serializer=transfer__pb2.WriteStreamResponse.SerializeToString,
            ),
            'ReadStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadStream,
                    request_deserializer=transfer__pb2.ReadStreamRequest.FromString,
                    response_serializer=transfer__pb2.ReadStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transfersdk.TransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransferService(object):
    """
    Transfer service definition. This service enables users to start, manage and monitor transfers.
    You can also  get information about the transfer service settings and confirm the availability of
    communication between the engine and a remote transfer server.
    """

    @staticmethod
    def Validate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/Validate',
            transfer__pb2.ValidationRequest.SerializeToString,
            transfer__pb2.ValidationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/StartTransfer',
            transfer__pb2.TransferRequest.SerializeToString,
            transfer__pb2.StartTransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTransferWithMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/transfersdk.TransferService/StartTransferWithMonitor',
            transfer__pb2.TransferRequest.SerializeToString,
            transfer__pb2.TransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/QueryTransfer',
            transfer__pb2.TransferInfoRequest.SerializeToString,
            transfer__pb2.QueryTransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/ModifyTransfer',
            transfer__pb2.TransferModificationRequest.SerializeToString,
            transfer__pb2.TransferModificationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTransferPaths(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/AddTransferPaths',
            transfer__pb2.TransferPathRequest.SerializeToString,
            transfer__pb2.TransferPathResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockPersistentTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/LockPersistentTransfer',
            transfer__pb2.LockPersistentTransferRequest.SerializeToString,
            transfer__pb2.LockPersistentTransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/StopTransfer',
            transfer__pb2.StopTransferRequest.SerializeToString,
            transfer__pb2.StopTransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorTransfers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/transfersdk.TransferService/MonitorTransfers',
            transfer__pb2.RegistrationRequest.SerializeToString,
            transfer__pb2.TransferResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/GetAPIVersion',
            transfer__pb2.APIVersionRequest.SerializeToString,
            transfer__pb2.APIVersionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/GetInfo',
            transfer__pb2.InstanceInfoRequest.SerializeToString,
            transfer__pb2.InstanceInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsPeerReachable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfersdk.TransferService/IsPeerReachable',
            transfer__pb2.PeerCheckRequest.SerializeToString,
            transfer__pb2.PeerCheckResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteStreamChunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/transfersdk.TransferService/WriteStreamChunk',
            transfer__pb2.WriteStreamChunkRequest.SerializeToString,
            transfer__pb2.WriteStreamChunkResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/transfersdk.TransferService/WriteStream',
            transfer__pb2.WriteStreamRequest.SerializeToString,
            transfer__pb2.WriteStreamResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/transfersdk.TransferService/ReadStream',
            transfer__pb2.ReadStreamRequest.SerializeToString,
            transfer__pb2.ReadStreamResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
