#!/usr/bin/env bash
set -eo pipefail
PORTAINER_HOST=${PORTAINER_HOST:-portainer.dsco.ucsf.edu}

if [ -n "$SOCKS" ]; then
  PROXY="--proxy=http:socks5h://$SOCKS --proxy=https:socks5h://$SOCKS"
fi
prog=$0
error() {
   echo "Whoops!  Looks like $1:$2 failed."
   echo "Please try rerunning $prog again."
   exit 1
}
trap 'error "${BASH_SOURCE}" "${LINENO}"' ERR


function doPortainerAuth() {
  set -eo pipefail
  local forceLogin=$1

  UN=
  PW=
  if [[ -f ~/.portainer-auth && -z "$forceLogin" ]]; then
    JWT=$(cat ~/.portainer-auth)
  else
    if [ -f /run/secrets/portainer-auth.env ]; then
      source /run/secrets/portainer-auth.env
    else
      read -e -p "Portainer username: " UN
      read -es -p "Portainer password: " PW
      echo
    fi

    JWT=$(http --ignore-stdin $PROXY POST https://${PORTAINER_HOST}/api/auth Username="${UN}" Password="${PW}" | tee >(cat 1>&2) | jq -r '.jwt')

    if ! [ -f /run/secrets/portainer-auth.env ]; then
      echo "$JWT" > ~/.portainer-auth
    fi
  fi
}

function doGithubAuth() {
  set -eo pipefail
  if [ -f /run/secrets/git-swarm-keeper-private-key ]; then
    mkdir -p ~/.ssh/
    ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    cp /run/secrets/git-swarm-keeper-private-key ~/.ssh/id_rsa
  fi
}

function api() {
  set -eo pipefail

  local verb
  local path
  verb="$1"
  shift
  path="$1"
  shift
  http --check-status $PROXY "$verb" https://${PORTAINER_HOST}/api${path} "Authorization: Bearer ${JWT}" "$@"
}

function dockerApi() {
  set -eo pipefail

  local verb
  local path
  verb="$1"
  shift
  path="$1"
  shift
  api $verb /endpoints/${ENDPOINT:-1}/docker${path} "$@"
}

function listStacks() {
  set -eo pipefail
  api GET /stacks | jq -c '.[]'
}

function nonNull() {
  set -eo pipefail
  echo "$1" | jq --exit-status >/dev/null
}

function dig() {
  set -eo pipefail

  local input
  input="$1"
  shift
  echo "$input" | jq -c "$@"
}

function findStack() {
  set -eo pipefail

  local stackId
  stackId=$(api GET /stacks | jq  --arg n "$1" -c '.[] | select(.Name == $n) | .Id')

  if [[ -z "$stackId" ]]; then
    echo "Could not find stack '$1'" 1>&2
    echo "Found these: $(api GET /stacks | jq -r -c '.[] | .Name')" 1>&2
    return 1
  fi

  api GET /stacks/$stackId
}

function downloadStack() {
  set -eo pipefail
  local tmp
  local stack
  local id

  tmp=$(mktemp)
  stack="$1"
  id="$(dig "$stack" -r '.Id')"

  api GET /stacks/$id/file | jq -r -c '.StackFileContent' > $tmp || return 1
  echo $tmp
}

function editsFile() {
  set -eo pipefail
  local marker

  marker=$(mktemp)
  ${EDITOR:-vim} $1
  [[ $marker -ot $1 ]]
}

function mergeJson() {
  set -eo pipefail
  jq -n --argjson a "$1" --argjson b "$2" '$a * $b'
}

function concatJson() {
  set -eo pipefail
  jq -n --argjson a "$1" --argjson b "$2" '$a + $b'
}

function updateStackYml() {
  set -eo pipefail

  local stack stackContent env endpoint stackId

  stack="$1"
  stackContent=${2:-}
  env=${3:-$(dig "$stack" '.Env')} || return 1

  endpoint="$(dig "$stack" -r '.EndpointId')"
  stackId="$(dig "$stack" -r '.Id')"

  if [[ -z "$stackContent" ]]; then
    stackContent="$(cat "$(downloadStack "$stack")")" || return 1
  fi

  jq -c -n --argjson env "$env" --arg content "$stackContent" '{stackFileContent: $content, prune: true, env: $env}' | api PUT /stacks/$stackId?endpointId=$endpoint
}

function servicesInStack() {
  set -eo pipefail

  local stack
  local filtersJson

  stack="$1"
  name=$(dig "$stack" -r '.Name')
  filtersJson=$(jq -n -c --arg n $name '{label: ["com.docker.stack.namespace=" + $n]}')
  dockerApi GET /services "filters==$filtersJson" | jq -r -c '.[] | .Spec.Name'
}

function getResourceBy() {
  set -eo pipefail

  local filterName
  local filtersJson
  local matchName
  local exactMatcher
  local resourcesName
  local result

  filterName="$1"
  matchName="$2"
  resourcesName="$3"
  exactMatcher="$4"
  shift

  if [[ -z "$filterName" ]]; then
    return 1
  fi
  if [[ -z "$matchName" ]]; then
    return 1
  fi
  if [[ -z "$exactMatcher" ]]; then
    return 1
  fi

  filtersJson=$(jq -n -c --arg f "$filterName" --arg n "$1" '{($f): [$n]}')
  result="$(dockerApi GET /$resourcesName "filters==$filtersJson")" || return 1
  if [[ -n "$exactMatcher" ]]; then
    result=$(dig "$result" --arg v1 "$matchName" "map(select($exactMatcher == \$v1))")
  fi
  result=$(dig "$result" '.[0]')
  if nonNull "$result"; then
    echo "$result"
  else
    echo "Could not find $resourcesName by $filterName '$matchName'" 1>&2
    return 1
  fi
}

function getImage() {
  set -eo pipefail
  getResourceBy "reference" "$1" "images"
}

function getService() {
  set -eo pipefail
  getResourceBy "name" "$1" "services" '.Spec.Name'
}

function getConfig() {
  set -eo pipefail
  getResourceBy "name" "$1" "configs" '.Spec.Name'
}

function getSecret() {
  set -eo pipefail
  getResourceBy "name" "$1" "secrets" '.Spec.Name'
}


function deleteSecret() {
  set -eo pipefail
  local secret

  secret=$(getSecret "$1" || echo null)
  if nonNull "$secret"; then
    echo "Removing secret $1"
    dockerApi DELETE /secrets/$(dig "$secret" -r '.ID') 1>/dev/null || return 1
    return 0
  fi
  echo "Secret $1 not found, skipping delete."
}


function deleteConfig() {
  set -eo pipefail
  local config

  config=$(getConfig "$1" || echo null)
  if nonNull "$config"; then
    echo "Removing config $1"
    dockerApi DELETE /configs/$(dig "$config" -r '.ID') 1>/dev/null || return 1
    return 0
  fi
  echo "Config $1 not found, skipping delete."
}

function awaitServiceDeploy() {
  set -eo pipefail

  local serviceName success service filtersJson status updateStartedAt completed serviceState task tasks

  serviceName="$1"
  success=

  echo "Awaiting update to converge on $serviceName"

  for i in {0..60}
  do
    service=$(getService "$serviceName") || continue
    filtersJson=$(jq -n -c --arg n $serviceName '{service: [$n], "desired-state": ["shutdown"]}')
    status=$(dig "$service" -r '.UpdateStatus.State')
    updateStartedAt=$(dig "$service" -r '.UpdateStatus.StartedAt // "0"')
    completed=$(dockerApi GET /tasks "filters==$filtersJson" | jq -c -r --arg sa "$updateStartedAt" '.[] | select(.CreatedAt >= $sa)') || continue
    echo "$serviceName update is $status"

    case $status in
      completed|null)
        success=1
        break
        ;;
      paused)
        serviceState=

        IFS=$'\n' readarray -t tasks <<< "$completed"
        for task in "${tasks[@]}"; do
          serviceState=$(dig "$task" -r '.Status.State')
          if [[ "$serviceState" != "complete" ]]; then
            success=
            break
          fi

          success=1
        done

        break
        ;;
      rollback_completed|rollback_failed|rollback_started|rollback_paused)
        break
        ;;
    esac
    sleep 3
  done

  if [[ "$success" == 1 ]]; then
    echo "Service finished deployment successfully"
    return 0
  fi

  echo "Service update was not successful"
  return 1
}

function awaitStackDeploy() {
  set -eo pipefail

  local stack endpoint stackId name services serviceName deployFailed

  stack="$1"
  endpoint="$(dig "$stack" -r '.EndpointId')"
  stackId="$(dig "$stack" -r '.Id')"
  name="$(dig "$stack" -r '.Name')"
  services="$(servicesInStack "$stack")" || return 1
  deployFailed=

  echo "Awaiting stack '$name' services to converge..."

  for serviceName in $services; do
    awaitServiceDeploy $serviceName || deployFailed=1
  done

  if [[ -n "$deployFailed" ]]; then
    return 1
  fi
}

function downloadConfig() {
  set -eo pipefail

  local tmp stack config

  tmp=$(mktemp)
  stack="$1"
  config="$(getConfig "$stack" "$2")" || return 1

  echo "$config" | jq -r '.Spec.Data | @base64d' > $tmp
  echo $tmp
}

function findByCanonicalName() {
  set -eo pipefail
  local filtersJson canonName resourcesName
  canonName="$1"
  resourcesName="$2"
  filtersJson=$(printJson '{name: [$v1]}' "$canonName")
  dockerApi GET /$resourcesName "filters==$filtersJson" | jq --arg v1 "$canonName" 'map(select(.Spec.Name == $v1 or .Spec.Labels.replaces == $v1 or .Spec.Labels.canon == $v1))'
}


function findConfigsByCanonicalName() {
  findByCanonicalName "$1" "configs"
}

function canonicalNameOf() {
  dig "$1" -r '.Spec.Labels.canon // .Spec.Labels.replaces // .Spec.Name'
}

function findCanonicalOf() {
  set -eo pipefail
  local canonName resourcesName
  canonName=$(canonicalNameOf "$1")
  resourcesName="$2"
  findByCanonicalName "$canonName" "$resourcesName"
}


function findCanonicalConfigsOf() {
  findCanonicalOf "$1" "configs"
}

function updateService() {
  set -eo pipefail

  local service spec serviceId version update

  service="$1"
  update="$2"

  spec=$(dig "$service" '.Spec')
  serviceId=$(dig "$service" -r '.ID')
  version=$(dig "$service" -r '.Version.Index')
  update="$(mergeJson "$spec" "$update")"

  echo "$update" | dockerApi POST /services/$serviceId/update version=="$version" 1>/dev/null
}

function convergeReplacement() {
  set -eo pipefail

  local obj targetName deployFailed anyDeployFailed resourcesName
  local env replaceTargetNames newEnv stacks

  obj="$1"
  resourcesName="$2"
  targetName="$(dig "$obj" -r '.Spec.Name')"
  replaceTargetNames=$(findCanonicalOf "$obj" "$resourcesName" | jq 'map(.Spec.Name)')
  anyDeployFailed=
  stacks="$(listStacks)" || return 1
  IFS=$'\n' readarray -t stacks <<< "$stacks"

  echo "Targeting replacement of $resourcesName $replaceTargetNames" 1>&2

  for stack in "${stacks[@]}"; do
    deployFailed=
    env=$(dig "$stack" '.Env')
    newEnv=$(dig "$env" --argjson targetNames "$replaceTargetNames" --arg targetName "$targetName" 'map(if (.value as $v | $targetNames | index($v) >= 0) then .value |= $targetName  else . end)')
    if [[ "$newEnv" != "$env" ]]; then
      updateStackYml  "$stack" "" "$newEnv" || deployFailed=1
      awaitStackDeploy "$stack" || deployFailed=1
      if [[ -n "$deployFailed" ]]; then
        postToSlack "Deployment of $resourcesName $targetName to $(dig "$stack" '.Name') failed, check portainer."
        anyDeployFailed=1
      fi
    fi
  done

  if [[ -z "$anyDeployFailed" ]]; then
    return 0
  fi

  return 1
}

function updateConfigLabels() {
  set -eo pipefail

  local config update labels configId version

  config="$1"
  update="$2"

  labels=$(dig "$config" '.Spec.Labels')
  update=$(dig "$labels" "$update")
  update=$(dig "$update" '{Labels: .}')
  update=$(mergeJson "$(dig "$config" '.Spec | del(.Labels)')" "$update")

  configId=$(dig "$config" -r '.ID')
  version=$(dig "$config" -r '.Version.Index')

  echo "$update" | dockerApi POST /configs/$configId/update version=="$version" 1>/dev/null
}

function resourceIdOf() {
  dig "$1" '.Portainer.ResourceControl.Id'
}

function withCopiedResourceControls() {
  set -eo pipefail

  local original new origResourceControl newResourceId

  original="$1"
  shift
  new="$("$@")"

  origResourceControl=$(dig "$original" '.Portainer.ResourceControl')
  newResourceId=$(resourceIdOf "$new")
  api PUT /resource_controls/$newResourceId \
    "AdministratorsOnly:=$(dig "$origResourceControl" '.AdministratorsOnly')" \
    "Public:=$(dig "$origResourceControl" '.Public')" \
    "Teams:=$(dig "$origResourceControl" '.TeamAccesses | map(.TeamId)')" \
    "Users:=$(dig "$origResourceControl" '.UserAccesses | map(.UserId)')" 1>/dev/null

  echo "$new"
}

function encodeData() {
  jq --arg data "$1" -r -n '$data | @base64'
}

function printJson() {
  local formula="$1"
  local args i
  i=1
  args=()
  shift
  while [[ "$#" != "0" ]]; do
    args+=("--arg" "v$i" "$1")
    shift
    ((i+=1))
  done
  jq -n -c "${args[@]}" "$formula"
}

function createSecret() {
  set -eo pipefail

  local original labels data now name
  local name
  name="$1"
  data="$2"
  labels="$3"

  dockerApi POST /secrets/create "Name=$name" "Data=$data" "Labels:=$labels"
}


function createConfig() {
  set -eo pipefail

  local original labels data now name
  local name
  name="$1"
  data="$2"
  labels="$3"

  dockerApi POST /configs/create "Name=$name" "Data=$data" "Labels:=$labels"
}

function deriveNextSecret() {
  set -eo pipefail

  local original labels data newId now name
  original=$(getSecret "$1") || return 1
  data="$2"
  labels=$(dig "$original" '.Spec.Labels // {}')
  canonName=$(dig "$labels" -r '.canon // .replaces // ""')
  if [[ -z "$canonName" ]]; then
    canonName="$1"
  fi

  labels=$(mergeJson "$labels" "$(printJson '{replaces: $v1, canon: $v2}' "$1" "$canonName")")
  now=$(date +"%s")
  name=${3:-"${canonName}_${now}"}

  newId=$(createSecret "$name" "$data" "$labels" | jq -r '.ID') || return 1
  withCopiedResourceControls "$original" dockerApi GET /secrets/$newId || return 1
}

function deriveNextConfig() {
  set -eo pipefail

  local original labels data newConfigId now name
  original=$(getConfig "$1") || return 1
  data="$2"
  labels=$(dig "$original" '.Spec.Labels // {}')
  canonName=$(dig "$labels" -r '.canon // .replaces // ""')
  if [[ -z "$canonName" ]]; then
    canonName="$1"
  fi

  labels=$(mergeJson "$labels" "$(printJson '{replaces: $v1, canon: $v2}' "$1" "$canonName")")
  now=$(date +"%s")
  name=${3:-"${canonName}_${now}"}

  newConfigId=$(createConfig "$name" "$data" "$labels" | jq -r '.ID') || return 1
  withCopiedResourceControls "$original" dockerApi GET /configs/$newConfigId || return 1
}

function listUpdateableServiceNames() {
  set -eo pipefail
  local filtersJson
  filtersJson=$(jq -n -c '{label: ["autoupdate=true"]}')
  dockerApi GET /services "filters==$filtersJson" | jq -r '.[] | .Spec.Name'
}

function shaOfImageDigest() {
  if [[ "$1" =~ ([^@]*)@(.*) ]]; then
    echo ${BASH_REMATCH[2]}
  fi
}

function versionOfStackFilePath() {
  if [[ "$1" =~ ([^.]*)\.([0-9]+)\.yml ]]; then
    echo ${BASH_REMATCH[2]}
  fi
}

function nameOfStackFilePath() {
  if [[ "$1" =~ ([^.]*).*\.yml ]]; then
    echo ${BASH_REMATCH[1]}
  fi
}

function tagOfImageDigest() {
  if [[ "$1" =~ ([^@]*)@(.*) ]]; then
    echo ${BASH_REMATCH[1]}
  fi
}

function checkAndDeployUpdatedImages() {
  set -eo pipefail
  local serviceName service serviceId image tag sha newImage newsha version deployFailed services
  docker image prune -f
  services="$(listUpdateableServiceNames)"

  for serviceName in $services; do
    echo "Checking $serviceName for updated image..."
    service=$(getService "$serviceName")
    serviceId=$(dig "$service" -r '.ID')
    image=$(dig "$service" -r '.Spec.TaskTemplate.ContainerSpec.Image')
    tag=$(tagOfImageDigest "$image")
    sha=$(shaOfImageDigest "$image")
    deployFailed=
    echo "Current tag is $tag, sha is $sha"

    if [[ -n "$sha" ]]; then
      docker pull "$tag" 1>/dev/null
      image=$(docker image inspect "$tag")
      newImage=$(dig "$image" -r '.[].RepoDigests[]' | head -n 1 || true)
      newsha=$(shaOfImageDigest "$newImage")

      echo "Found $newsha on $tag, existing is $sha"

      if ! [ -f "/deployed/${serviceName}-${newsha}" ] && [[ "${sha}" != "$(shaTestHook "$serviceName" "$newsha")" ]]; then
        postToSlack "Attempting deploy on ${serviceName} (${tag}@${newsha:8:6})"
        updateService "$service" "$(printJson '{TaskTemplate: {ContainerSpec: {Image: $v1}}}' "$tag@$newsha")" 1>/dev/null
        touch "/deployed/${serviceName}-${newsha}" || true
        awaitServiceDeploy "$serviceName" || deployFailed=1

        if [[ -n "$deployFailed" ]]; then
          postToSlack "Deployment of ${serviceName} may have failed, check portainer."
        else
          postToSlack "Deployment of ${serviceName} succeeded."
        fi
      fi
    fi

    docker image prune -f
  done
}

function shaTestHook() {
  echo "$2"
}

function pushStackToRep() {
  set -eo pipefail
  stack="$1"
  name=$(dig "$stack" -r '.Name')
  id=$(dig "$stack" -r '.Id')
  gitConfig=$(dig "$stack" '.GitConfig')

  gitSourceMarker="/tmp/${name}.updated"
  mkdir -p /tmp/
  if ! [ -e "$gitSourceMarker" ] || [[ "$(date -r "$gitSourceMarker" +%s)" -lt "$(dig "$stack" '.UpdateDate')" ]]; then
    touch "$gitSourceMarker"
    if [[ "$(dig "$gitConfig" -r '.URL')" =~ https:\/\/github.com/([^.]*)\.git ]]; then
      repo="${BASH_REMATCH[1]}"
      if [[ "$(dig "$gitConfig" -r '.ReferenceName')" =~ refs\/heads\/(.*) ]]; then
        branch="${BASH_REMATCH[1]}"
        echo "Cloning..."
        git clone "git@github.com:${repo}.git" --branch "$branch" --single-branch . >/dev/null
        git config --global user.name "swarm-keeper"
        git config --global user.email "etnaagent@ucsf.edu"
        content="$(dig "$(api GET "/stacks/${id}/file")" -r '.StackFileContent')"
        path="$(dig "$gitConfig" -r '.ConfigFilePath')"
        echo "$content" > $path
        git add $path
        git commit -m "Updating $path from swarm-keeper"
        git push
      else
        false
      fi
    else
      false
    fi
  else
    echo "Skipping ${name}, already up to date."
  fi
}

function postToSlack() {
  set -eo pipefail
  if type -p post-to-slack; then
    post-to-slack "Swarm Keeper" "watchtower-ping" "$1"
  else
    echo "$1" 1>&2
  fi
}

function updateGitSources() {
  set -eo pipefail
  local name stack stacks

  stacks=$(listStacks) || return 1
  IFS=$'\n' readarray -t stacks <<< "$stacks"

  for stack in "${stacks[@]}"; do
    name=$(dig "$stack" '.Name')
    echo "Processing $name"
    gitConfig=$(dig "$stack" '.GitConfig')
    if nonNull "$gitConfig"; then
      dir=$(mktemp -d)
      cd $dir
      if ! pushStackToRep "$stack"; then
        postToSlack "Failed to push $name to $gitConfig"
      fi
      cd ..
      rm -rf $dir
    fi
  done
}

function runCommand() {
  set -eo pipefail
  cmd="$1"
  shift

  local stack tmp

  case "$cmd" in
    portainer-login)
      doPortainerAuth 1
      ;;

    portainer-client)
      doPortainerAuth
      api "$@"
      ;;

    portainer-deploy-stack)
      doPortainerAuth

      while [[ "$#" != "0" ]]; do
        trueFilePath=

        if ! [[ -f "$1" ]]; then
          echo "Could not find file $1, assuming this is a new stack name..."
          stackFileName=
          stackName=$1
        else
          # Ignore files which might be versioned ymls
          if [[ -n "$(versionOfStackFilePath "$(basename "$1")")" ]]; then
            shift
            continue
          fi

          trueFilePath=$(readlink -f "$1") || return 1
          stackFileName=$(basename "$trueFilePath")
          stackName=$(nameOfStackFilePath "$stackFileName")
        fi

        stack=$(findStack "$stackName")
        version=$(dig "$stack" -r '.updateDate // .UpdateDate // ""')
        localVersion=$(versionOfStackFilePath "$stackFileName")


        echo "Processing ${stackName} from ${stackFileName}"
        echo "Found remote version '$version', local version is '$localVersion'"
        [[ -z "$version" ]] && return 1
        conflict=

        if [[ $localVersion == $version ]]; then
          updateStackYml "$stack" "$(cat $1)" || return 1
          awaitStackDeploy "$stack" || deployFailed=1
          if [[ -n "$deployFailed" ]]; then
            echo "Deployment of $path to $(dig "$stack" '.Name') failed, check portainer."
            anyDeployFailed=1
          fi
          stack=$(findStack "$stackName") || return 1
          version=$(dig "$stack" -r '.updateDate // .UpdateDate // ""') || return 1
          echo "$stack" | jq
        else
          echo "Local stack version from file was '$localVersion', but remote version was '$version'."
          conflict=1
        fi

        curVersionFilePath="$(dirname "$1")/$stackName.$version.yml"
        echo "Downloading current stack to $curVersionFilePath"
        cur=$(downloadStack "$stack") || return 1
        mv $cur "$curVersionFilePath" || return 1

        if [[ -n "$conflict" ]]; then
          echo "Edit $curVersionFilePath and rerun portainer-deploy-stack"

          if [[ -n "$trueFilePath" ]]; then
            echo "Compare upstream changes with: diff $trueFilePath $curVersionFilePath"
            tmp=$(mktemp)
            diff $trueFilePath $curVersionFilePath || true > $tmp
            echo "I've recorded the diff to $tmp for your convenience"
          fi
        fi

        if [[ -z "$conflict" ]] && [[ -n "$trueFilePath" ]]; then
          rm "$trueFilePath"
        fi

        ln -sf "$(basename $curVersionFilePath)" "$(dirname "$1")/$stackName.yml"
        shift
      done
      ;;

    portainer-swap-secret)
      originalName="$1"
      doPortainerAuth

      originalSecret=$(getSecret "$originalName" || echo null)
      if ! nonNull "$originalSecret"; then
        secrets=$(findByCanonicalName "$1" "secrets") || return 1
        secretNames=$(dig "$secrets" -r 'map(.Spec.Name)')
        echo "Could not find secret by name $originalName, dig you mean one of $secretNames?"
        return 1
      fi

      canonicalName=$(canonicalNameOf "$originalSecret")

      tmp=$(mktemp)
      if editsFile $tmp; then
        echo "Creating secret..."
        next=$(deriveNextSecret "$originalName" "$(encodeData "$(cat $tmp)")") || return 1
        echo "Deploying secret file change..."
        convergeReplacement "$next" "secrets" || return 1
        deleteSecret "$canonicalName" || return 1
        echo "Redeploying secret as $canonicalName..."
        next=$(deriveNextSecret "$(dig "$next" -r '.Spec.Name')" "$(encodeData "$(cat $tmp)")" "$canonicalName") || return 1
        convergeReplacement "$next" "secrets" || return 1
        echo "Success"
      else
        echo "File was not modified, not deploying"
      fi
      ;;

    portainer-edit-config)
      originalName="$1"
      doPortainerAuth

      originalConfig=$(getConfig "$originalName" || echo null)
      if ! nonNull "$originalConfig"; then
        configs=$(findConfigsByCanonicalName "$1") || return 1
        configNames=$(dig "$configs" -r 'map(.Spec.Name)')
        echo "Could not find config by $originalName, did you mean one of $configNames?"
        return 1
      fi

      canonicalName=$(canonicalNameOf "$originalConfig")

      tmp=$(downloadConfig "$originalName") || return 1
      if editsFile $tmp; then
        echo "Creating config..."
        next=$(deriveNextConfig "$originalName" "$(encodeData "$(cat $tmp)")") || return 1
        echo "Deploying config file change..."
        convergeReplacement "$next" "configs" || return 1
        deleteConfig "$canonicalName" || return 1
        echo "Redeploying config as $canonicalName..."
        next=$(deriveNextConfig "$(dig "$next" -r '.Spec.Name')" "$(encodeData "$(cat $tmp)")" "$canonicalName") || return 1
        convergeReplacement "$next" "configs" || return 1
        echo "Success"
      else
        echo "File was not modified, not deploying"
      fi
  esac
}