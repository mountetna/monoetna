function disableMocks() {
  export PATH=${PATH/$MOCK_PATH/}
  MOCK_PATH=
}

function mock() {
  disableMocks

  for cmd in $1; do
      local cmd=$1
      local dir=$(mktemp -d)

      MOCK_PATH=$dir:$MOCK_PATH
      echo "#!/usr/bin/env bash
      runMock ${dir} ${cmd} \"\$@\"
      " > $dir/$cmd
      chmod +x $dir/$cmd
  done

  export PATH=${MOCK_PATH}${PATH}
}

function runMock() {
  local dir=$1
  shift
  local PATH=${PATH/$dir:/}

  local cmd=$1
  shift

  if [[ -z "$RECORD_FILE" ]]; then
    $cmd "$@"
  else
    local args=$(printf '%s\n' "$@" | jq -R . | jq -s .)
    local stdout=$(mktemp)
    local stderr=$(mktemp)
    local stdin=$(mktemp)

    case ${RECORD_MODE:-playback} in
      record)
        if ! [ -t 0 ] ; then
          cat - > $stdin
        fi

        local result=127
        if cat $stdin | $cmd "$@" 1> >(tee $stdout) 2> >(tee $stderr >&2); then
          result=0
        else
          result=$?
        fi

        jq -n -c --argjson args "$args" --arg cmd "$cmd" \
          --arg stdin "$(cat $stdin)" --arg stdout "$(cat $stdout)" --arg stderr "$(cat $stderr)" --arg result $result \
          '{cmd: $cmd, args: $args, result: $result, stdin: $stdin, stdout: $stdout, stderr: $stderr}' >> $RECORD_FILE

        return $result
        ;;
      playback)
        ;;
      *)
        exit 1
        ;;
    esac
  fi
}

function loadRecording() {
  case ${RECORD_MODE:-playback} in
    playback)
        local tmp=$(mktemp)
        touch $1
        cat $1 > $tmp
        export RECORD_FILE=$tmp
        ;;
    *)
      echo '' > $1
      export RECORD_FILE=$1
      ;;
  esac
}

export -f runMock
