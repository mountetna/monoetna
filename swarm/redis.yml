version: '3.8'
services:
  # Redis worker nodes, will replicate to each other an elect a primary.
  # See the redis-ha image entrypoint for how this works on startup.
  # sentinels are set up below as agents that figure out and load balance
  # the connections on behalf of client connections.
  redis:
    image: etnaagent/redis-ha:production
    environment:
      # this must match the service name for the redis workers above,
      # check entrypoints file to see how this is used for service discovery.
      REDIS_NAME: redis
      REDIS_PORT: 6379
      PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    deploy:
      mode: replicated
      # Increase the replicas here
      replicas: 2
      # Prevent the docker router mesh from doing 'cleverness'
      endpoint_mode: dnsrr
      placement:
        # At most replicas - 1 to ensure they are divided amongst 2 machines.
        max_replicas_per_node: 1
  sentinel:
    image: etnaagent/redis-ha:production
    command: redis-sentinel
    environment:
      # this must match the service name for the redis workers above,
      # check entrypoints file to see how this is used for service discovery.
      REDIS_NAME: redis
      REDIS_PORT: 6379
      SENTINEL_NAME: sentinel
      SENTINEL_PORT: 26379
      PASSWORD_FILE: /run/secrets/redis_password
      INSTANCE_NAME: myinstance
      QUORUM: 2
    secrets:
      - redis_password
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: dnsrr
      placement:
        # At most replicas - 1 to ensure they are divided amongst 2 machines.
        max_replicas_per_node: 2

volumes:
  rdb:

secrets:
  redis_password:
    external: true