"version: '3.8'\nservices:\n  # Redis worker nodes, will replicate to each other an elect a primary.\n  # See the redis-ha image entrypoint for how this works on startup.\n  # sentinels are set up below as agents that figure out and load balance\n  # the connections on behalf of client connections.\n  redis:\n    image: etnaagent/redis-ha:production\n    environment:\n      # this must match the service name for the redis workers above,\n      # check entrypoints file to see how this is used for service discovery.\n      REDIS_NAME: redis\n      REDIS_PORT: 6380\n      PASSWORD_FILE: /run/secrets/redis_password\n    volumes:\n    - redis-data:/data\n    secrets:\n      - redis_password\n    deploy:\n      mode: replicated\n      replicas: 3\n      # Prevent the docker router mesh from doing 'cleverness'\n      endpoint_mode: dnsrr\n      placement:\n        # Ensure that these are spread out, so that they don't share the same data volume\n        max_replicas_per_node: 1\n        constraints:\n          - node.role == worker\n          - node.labels.volumes.redis-data == true\n      # Allows sentinel to move around master node and reduce impact of deployment.\n      update_config:\n        parallelism: 1\n    networks:\n      - redis\n  sentinel:\n    image: etnaagent/redis-ha:production\n    command: redis-sentinel\n    environment:\n      # this must match the service name for the redis workers above,\n      # check entrypoints file to see how this is used for service discovery.\n      REDIS_NAME: redis\n      REDIS_PORT: 6380\n      SENTINEL_NAME: sentinel\n      SENTINEL_PORT: 26380\n      PASSWORD_FILE: /run/secrets/redis_password\n      # Redis sentinel supports multiple masters -- this names that master in the sentinel config.\n      # In reality it doesn't have much purpose, it would only matter if we use the same sentinel\n      # cluster to watch multiple redis\n      INSTANCE_NAME: myinstance\n      QUORUM: 2\n    secrets:\n      - redis_password\n    deploy:\n      mode: replicated\n      replicas: 3\n      endpoint_mode: dnsrr\n      placement:\n        # Ensure that these are spread out.\n        max_replicas_per_node: 1\n        constraints:\n          - node.role == worker\n      # Allows for slower roll out that does not interrupt fail over work.\n      update_config:\n        parallelism: 1\n    networks:\n      - redis\n\nvolumes:\n  redis-data:\n\nsecrets:\n  redis_password:\n    external: true\n\nnetworks:\n  redis:\n    external: true"
