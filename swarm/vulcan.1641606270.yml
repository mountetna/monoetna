version: '3.8'

services:
  postgres:
    image: postgres:10.12
    environment:
      POSTGRES_DB: 'vulcan'
      POSTGRES_PASSWORD: /run/secrets/password
      POSTGRES_USER: developer
    volumes:
      - db:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.labels.volumes.vulcan_db == true
    networks:
      - db
    secrets:
      - source: db-pw
        target: password

  # Exists purely to allow updates to its image via service deployer.
  # Intention is for this to be removed when we move the scheduler to airflow.
  archimedes:
    command: 
      - bash
      - -c
      - sleep 1
    image: etnaagent/archimedes:production
    deploy:
      labels:
        - autoupdate=true
      placement:
        # This should match the hosts that vulcan are deployed on.
        constraints:
          - node.labels.volumes.vulcan_data == true

  app:
    environment:
      - APP_NAME=vulcan
      - VULCAN_ENV=production
      - ETNA__PRODUCTION_FILE=/app/env.yml
      - ETNA__PRODUCTION__DB__PASSWORD_FILE=/run/secrets/db-password
      - ETNA__PRODUCTION__ROLLBAR__ACCESS_TOKEN=/run/secrets/rollbar-access-token
      - ETNA__PRODUCTION__USER_HASH_SECRET=/run/secrets/user-hash-secret
      - HOST_DIR_MAP=/app/data=/data_change_me_when_done
    command:
      - bash
      - -c
      - |
        set -e
        export METRICS_PW="$$(cat /run/secrets/metrics-pw)"
        exec /bin/deploy.sh migrate 'docker pull etnaagent/archimedes:production' -- /app/bin/puma.sh
    image: etnaagent/vulcan:production
    volumes:
      - /data_change_me_when_done/vulcan:/app/data/vulcan
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/node_exporter/metrics.prom:/tmp/metrics.prom
    user: 0:999 #1502:999 # vulcan:docker
    deploy:
      update_config:
        parallelism: 1
        order: start-first
      labels:
        - autoupdate=true
        - prometheus-etna=1 # 3000
        - prometheus-puma=1 # 9234
      placement:
        constraints:
          - node.labels.volumes.vulcan_data == true
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 1s
      test: bash -c 'curl http://localhost:3000 || exit 1'
      timeout: 5s
    configs:
      - source: config
        target: /app/config.yml
      - source: env
        target: /app/env.yml
    networks:
      db:
      prometheus:
      fe:
        aliases:
          - vulcan_app
    secrets:
      - metrics-pw
      - user-hash-secret
      - source: db-pw
        target: db-password
      - rollbar-access-token
      

  app_fe:
    environment:
      - APP_NAME=vulcan
      - VULCAN_ENV=production

    image: etnaagent/vulcan_app_fe:production
    networks:
      - edge_bridge
      - fe
    volumes:
      - app_public:/app/public
      - /data_change_me_when_done/vulcan:/app/data/vulcan:ro
    user: 0:3000 # TODO: Can vulcan user be used here?
    configs:
      - source: browser.system.include
        target: /usr/opt/httpd.conf.d/browser.system.include
    deploy:
      labels:
        - autoupdate=true
      restart_policy:
        condition: none
      placement:
        constraints:
        - node.labels.volumes.vulcan_app_public == true
        - node.labels.volumes.vulcan_data == true

  app_assets_deployer:
    environment:
      APP_NAME: vulcan
      VULCAN_ENV: production

    command: /bin/deploy.sh syncAssets -- true # Sync the assets to the shared data volume and stop.
    image: etnaagent/vulcan:production
    volumes:
      - app_public:/sync-assets:rw

    deploy:
      labels:
        - autoupdate=true
      restart_policy:
        condition: none
      mode: global
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.labels.volumes.vulcan_app_public == true

volumes:
  app_public:
  db:
    name: vulcan_db

configs:
  browser.system.include:
    name: ${BROWSER_SYSTEM_INCLUDE:-browser.system.include}
    external: true
  config:
    external: true
    name: ${APP_CONFIG:-vulcan.production.yml}
  env:
    external: true
    name: ${ENV_CONFIG:-etna.production.yml}

secrets:
  db-pw:
    external: true
    name: "vulcan_production_db_password"
  user-hash-secret:
    external: true
    name: ${USER_HASH_SECRET:-user-hash-secret}
  metrics-pw:
    external: true
    name: ${METRICS_PW:-metrics-pw}
  rollbar-access-token:
    external: true
    name: ${ROLLBAR_ACCESS_TOKEN:-vulcan-rollbar-token}

networks:
  fe:
  db:
  edge_bridge:
    external: true
  prometheus:
    external: true
