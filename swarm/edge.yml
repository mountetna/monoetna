version: '3.8'
services:

  edge-apache:
    labels:
      - autoupdate=true
    image: etnaagent/edge-apache:production
    volumes:
      - httpd.conf.d:/usr/opt/httpd.conf.d:ro
      - /etc/ssl:/etc/ssl:ro
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement: &edge-placement
        constraints:
          - node.role == worker
          - node.labels.is_edge == true
    networks:
      - edge_bridge

  apply-config: &apply-config
    configs:
      - main.conf.erb
    image: etnaagent/config-agent:production
    volumes:
      - httpd.conf.d:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/ssl:/etc/ssl:ro
    deploy:
      labels:
        - autoupdate=true
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none

      placement:
        <<: *edge-placement

    command:
      - bash
      - -c
      - |
        set -ex
        source /lib/config-helpers
        template /main.conf.erb main.conf
        cat main.conf
        cat main.conf | docker run --rm -i -v /etc/ssl:/etc/ssl:ro etnaagent/edge-apache:production bash -c 'cat > /usr/opt/httpd.conf.d/main.conf && httpd -t'
        enable main.conf
        if [ -z "$$DRY_RUN" ]; then
          edge_node="$$(docker ps --filter name=edge_edge-apache -q || true)"
          if [ -n "$edge_node" ]; then
            docker kill --signal="USR1" "$$edge_node" || true
          fi
        fi

  test-config:
    <<: *apply-config

    volumes:
      - httpd.conf.d.test:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/ssl:/etc/ssl:ro
    environment:
      DRY_RUN: 1

volumes:
  # Contains the materialized configuration for each app, as well as main.conf.
  httpd.conf.d:
  httpd.conf.d.test:

networks:
  edge_bridge:
    external: true

configs:
  main.conf.erb:
    external: true