"version: '3.8'\nservices:\n\n  edge-apache:\n    labels:\n      - autoupdate=true\n    image: etnaagent/edge-apache:production\n    volumes:\n      - httpd.conf.d:/usr/opt/httpd.conf.d:ro\n      - /etc/ssl:/etc/ssl:ro\n    deploy:\n      mode: replicated\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n      placement: &edge-placement\n        constraints:\n          - node.role == worker\n          - node.labels.is_edge == true\n    networks:\n      - edge_bridge\n\n  apply-config: &apply-config\n    configs:\n      - main.conf.erb\n    image: etnaagent/config-agent:production\n    volumes:\n      - httpd.conf.d:/config\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /etc/ssl:/etc/ssl:ro\n    deploy:\n      labels:\n        - autoupdate=true\n      mode: replicated\n      replicas: 1\n      restart_policy:\n        condition: none\n\n      placement:\n        <<: *edge-placement\n\n    command:\n      - bash\n      - -c\n      - |\n        set -ex\n        source /lib/config-helpers\n        template /main.conf.erb main.conf\n        cat main.conf\n        cat main.conf | docker run --rm -i -v /etc/ssl:/etc/ssl:ro etnaagent/edge-apache:production bash -c 'cat > /usr/opt/httpd.conf.d/main.conf && httpd -t'\n        enable main.conf\n        if [ -z \"$$DRY_RUN\" ]; then\n          edge_node=\"$$(docker ps --filter name=edge_edge-apache -q || true)\"\n          if [ -n \"$edge_node\" ]; then\n            docker kill --signal=\"USR1\" \"$$edge_node\" || true\n          fi\n        fi\n\n  test-config:\n    <<: *apply-config\n\n    volumes:\n      - httpd.conf.d.test:/config\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /etc/ssl:/etc/ssl:ro\n    environment:\n      DRY_RUN: 1\n\nvolumes:\n  # Contains the materialized configuration for each app, as well as main.conf.\n  httpd.conf.d:\n  httpd.conf.d.test:\n\nnetworks:\n  edge_bridge:\n    external: true\n\nconfigs:\n  main.conf.erb:\n    external: true"
