#!/usr/bin/env bash
set -eo pipefail

# Clear images not being used to recover some space
docker image prune

postToSlack() {
  post-to-slack "swarm deployer" "watchtower-ping" "$1"
}

findServices() {
  docker service ls --format "{{.Name}}" --filter label=autoupdate=true
}

imageExists() {
  docker inspect --type=image "${1}" &>/dev/null
}

findServiceImage() {
  docker service inspect "${1}" --format "{{.Spec.TaskTemplate.ContainerSpec.Image}}"
}

function shaOfImageDigest() {
  if [[ "$1" =~ ([^@]*)@(.*) ]]; then
    echo ${BASH_REMATCH[2]}
  fi
}

function tagOfImageDigest() {
  if [[ "$1" =~ ([^@]*)@(.*) ]]; then
    echo ${BASH_REMATCH[1]}
  fi
}

if [ -e /run/secrets/service-deployer-docker-login ]; then
  echo 'Login using /run/secrets/service-deployer-docker-login'
  docker login -u etnaagent -p "$(cat /run/secrets/service-deployer-docker-login)"
else
  echo 'Could not find docker login at /run/secrets/service-deployer-docker-login, proceeding unauthenticated.'
fi



function runDeploy() {
  local serviceName="$1"
  local tag="$2"
  local newsha="$3"
  local success=
  local timeout=1

  echo "Attempting to deploy $newsha on $tag"
  postToSlack "Attempting deploy on ${serviceName} (${tag}@${newsha:8:6})"

  docker service update -d $serviceName --image "${tag}" --force
  for i in {0..60}
  do
    state=$(docker service inspect --format '{{if .UpdateStatus}}{{.UpdateStatus.State}}{{else}}created{{end}}' $serviceName)
    echo "state: ${state}"
    case $state in
      created|completed)
        success=1
        timeout=
        break
        ;;
      paused|rollback_completed)
        timeout=
        break
        ;;
    esac
    sleep 3
  done

  if [[ -n "$success" ]]; then
    touch "/deployed/${serviceName}-${newsha}"
    postToSlack "Deploy was successful."
  else
    if [[ -n "$timeout" ]]; then
      postToSlack "Deploy timed out, it may succeed or fail, check portainer."
    else
      postToSlack "Deploy failed, check portainer logs."
    fi
  fi
}

services="$(findServices)"
echo "Found services to check: ${services}"

for serviceName in $services; do
  echo "Checking $serviceName"
  image="$(findServiceImage $serviceName)"
  tag=$(tagOfImageDigest "$image")
  sha=$(shaOfImageDigest "$image")

  if [[ -n "$sha" ]]; then
    docker pull "$tag" &>/dev/null
    newImage=$(docker image inspect "${tag}" | jq -r '.[].RepoDigests[]')
    newsha=$(shaOfImageDigest "$newImage")

    echo "Found $newsha on $image $tag, existing is $sha"
    if ! [ -f "/deployed/${serviceName}-${newsha}" ] && [[ "${sha}" != "${newsha}" ]]; then
      runDeploy "$serviceName" "$tag" "$newsha"
    fi

    docker image prune
  fi
done